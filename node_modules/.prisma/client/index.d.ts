
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Obra
 * 
 */
export type Obra = $Result.DefaultSelection<Prisma.$ObraPayload>
/**
 * Model Documento
 * 
 */
export type Documento = $Result.DefaultSelection<Prisma.$DocumentoPayload>
/**
 * Model Etapa
 * 
 */
export type Etapa = $Result.DefaultSelection<Prisma.$EtapaPayload>
/**
 * Model Melhoria
 * 
 */
export type Melhoria = $Result.DefaultSelection<Prisma.$MelhoriaPayload>
/**
 * Model EtapaHistorico
 * 
 */
export type EtapaHistorico = $Result.DefaultSelection<Prisma.$EtapaHistoricoPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.obra`: Exposes CRUD operations for the **Obra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Obras
    * const obras = await prisma.obra.findMany()
    * ```
    */
  get obra(): Prisma.ObraDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.documento`: Exposes CRUD operations for the **Documento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documentos
    * const documentos = await prisma.documento.findMany()
    * ```
    */
  get documento(): Prisma.DocumentoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.etapa`: Exposes CRUD operations for the **Etapa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Etapas
    * const etapas = await prisma.etapa.findMany()
    * ```
    */
  get etapa(): Prisma.EtapaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.melhoria`: Exposes CRUD operations for the **Melhoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Melhorias
    * const melhorias = await prisma.melhoria.findMany()
    * ```
    */
  get melhoria(): Prisma.MelhoriaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.etapaHistorico`: Exposes CRUD operations for the **EtapaHistorico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EtapaHistoricos
    * const etapaHistoricos = await prisma.etapaHistorico.findMany()
    * ```
    */
  get etapaHistorico(): Prisma.EtapaHistoricoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Obra: 'Obra',
    Documento: 'Documento',
    Etapa: 'Etapa',
    Melhoria: 'Melhoria',
    EtapaHistorico: 'EtapaHistorico'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "usuario" | "obra" | "documento" | "etapa" | "melhoria" | "etapaHistorico"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsuarioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Obra: {
        payload: Prisma.$ObraPayload<ExtArgs>
        fields: Prisma.ObraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ObraFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ObraFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>
          }
          findFirst: {
            args: Prisma.ObraFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ObraFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>
          }
          findMany: {
            args: Prisma.ObraFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>[]
          }
          create: {
            args: Prisma.ObraCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>
          }
          createMany: {
            args: Prisma.ObraCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ObraCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>[]
          }
          delete: {
            args: Prisma.ObraDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>
          }
          update: {
            args: Prisma.ObraUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>
          }
          deleteMany: {
            args: Prisma.ObraDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ObraUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ObraUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>[]
          }
          upsert: {
            args: Prisma.ObraUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObraPayload>
          }
          aggregate: {
            args: Prisma.ObraAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateObra>
          }
          groupBy: {
            args: Prisma.ObraGroupByArgs<ExtArgs>
            result: $Utils.Optional<ObraGroupByOutputType>[]
          }
          count: {
            args: Prisma.ObraCountArgs<ExtArgs>
            result: $Utils.Optional<ObraCountAggregateOutputType> | number
          }
        }
      }
      Documento: {
        payload: Prisma.$DocumentoPayload<ExtArgs>
        fields: Prisma.DocumentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findFirst: {
            args: Prisma.DocumentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          findMany: {
            args: Prisma.DocumentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>[]
          }
          create: {
            args: Prisma.DocumentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          createMany: {
            args: Prisma.DocumentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>[]
          }
          delete: {
            args: Prisma.DocumentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          update: {
            args: Prisma.DocumentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          deleteMany: {
            args: Prisma.DocumentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DocumentoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>[]
          }
          upsert: {
            args: Prisma.DocumentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentoPayload>
          }
          aggregate: {
            args: Prisma.DocumentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocumento>
          }
          groupBy: {
            args: Prisma.DocumentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentoCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentoCountAggregateOutputType> | number
          }
        }
      }
      Etapa: {
        payload: Prisma.$EtapaPayload<ExtArgs>
        fields: Prisma.EtapaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EtapaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EtapaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>
          }
          findFirst: {
            args: Prisma.EtapaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EtapaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>
          }
          findMany: {
            args: Prisma.EtapaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>[]
          }
          create: {
            args: Prisma.EtapaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>
          }
          createMany: {
            args: Prisma.EtapaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EtapaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>[]
          }
          delete: {
            args: Prisma.EtapaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>
          }
          update: {
            args: Prisma.EtapaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>
          }
          deleteMany: {
            args: Prisma.EtapaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EtapaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EtapaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>[]
          }
          upsert: {
            args: Prisma.EtapaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaPayload>
          }
          aggregate: {
            args: Prisma.EtapaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEtapa>
          }
          groupBy: {
            args: Prisma.EtapaGroupByArgs<ExtArgs>
            result: $Utils.Optional<EtapaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EtapaCountArgs<ExtArgs>
            result: $Utils.Optional<EtapaCountAggregateOutputType> | number
          }
        }
      }
      Melhoria: {
        payload: Prisma.$MelhoriaPayload<ExtArgs>
        fields: Prisma.MelhoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MelhoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MelhoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>
          }
          findFirst: {
            args: Prisma.MelhoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MelhoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>
          }
          findMany: {
            args: Prisma.MelhoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>[]
          }
          create: {
            args: Prisma.MelhoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>
          }
          createMany: {
            args: Prisma.MelhoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MelhoriaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>[]
          }
          delete: {
            args: Prisma.MelhoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>
          }
          update: {
            args: Prisma.MelhoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>
          }
          deleteMany: {
            args: Prisma.MelhoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MelhoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MelhoriaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>[]
          }
          upsert: {
            args: Prisma.MelhoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MelhoriaPayload>
          }
          aggregate: {
            args: Prisma.MelhoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMelhoria>
          }
          groupBy: {
            args: Prisma.MelhoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MelhoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MelhoriaCountArgs<ExtArgs>
            result: $Utils.Optional<MelhoriaCountAggregateOutputType> | number
          }
        }
      }
      EtapaHistorico: {
        payload: Prisma.$EtapaHistoricoPayload<ExtArgs>
        fields: Prisma.EtapaHistoricoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EtapaHistoricoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EtapaHistoricoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>
          }
          findFirst: {
            args: Prisma.EtapaHistoricoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EtapaHistoricoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>
          }
          findMany: {
            args: Prisma.EtapaHistoricoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>[]
          }
          create: {
            args: Prisma.EtapaHistoricoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>
          }
          createMany: {
            args: Prisma.EtapaHistoricoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EtapaHistoricoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>[]
          }
          delete: {
            args: Prisma.EtapaHistoricoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>
          }
          update: {
            args: Prisma.EtapaHistoricoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>
          }
          deleteMany: {
            args: Prisma.EtapaHistoricoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EtapaHistoricoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EtapaHistoricoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>[]
          }
          upsert: {
            args: Prisma.EtapaHistoricoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EtapaHistoricoPayload>
          }
          aggregate: {
            args: Prisma.EtapaHistoricoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEtapaHistorico>
          }
          groupBy: {
            args: Prisma.EtapaHistoricoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EtapaHistoricoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EtapaHistoricoCountArgs<ExtArgs>
            result: $Utils.Optional<EtapaHistoricoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    usuario?: UsuarioOmit
    obra?: ObraOmit
    documento?: DocumentoOmit
    etapa?: EtapaOmit
    melhoria?: MelhoriaOmit
    etapaHistorico?: EtapaHistoricoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    obras: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obras?: boolean | UsuarioCountOutputTypeCountObrasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountObrasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObraWhereInput
  }


  /**
   * Count Type ObraCountOutputType
   */

  export type ObraCountOutputType = {
    documentos: number
    etapas: number
    melhorias: number
  }

  export type ObraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentos?: boolean | ObraCountOutputTypeCountDocumentosArgs
    etapas?: boolean | ObraCountOutputTypeCountEtapasArgs
    melhorias?: boolean | ObraCountOutputTypeCountMelhoriasArgs
  }

  // Custom InputTypes
  /**
   * ObraCountOutputType without action
   */
  export type ObraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObraCountOutputType
     */
    select?: ObraCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ObraCountOutputType without action
   */
  export type ObraCountOutputTypeCountDocumentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
  }

  /**
   * ObraCountOutputType without action
   */
  export type ObraCountOutputTypeCountEtapasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EtapaWhereInput
  }

  /**
   * ObraCountOutputType without action
   */
  export type ObraCountOutputTypeCountMelhoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MelhoriaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    criadoEm: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    criadoEm: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    criadoEm: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criadoEm?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criadoEm?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    criadoEm?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    criadoEm: Date
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criadoEm?: boolean
    obras?: boolean | Usuario$obrasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criadoEm?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criadoEm?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    criadoEm?: boolean
  }

  export type UsuarioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "senha" | "criadoEm", ExtArgs["result"]["usuario"]>
  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obras?: boolean | Usuario$obrasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UsuarioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      obras: Prisma.$ObraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      criadoEm: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {UsuarioUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsuarioUpdateManyAndReturnArgs>(args: SelectSubset<T, UsuarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    obras<T extends Usuario$obrasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$obrasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly criadoEm: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario updateManyAndReturn
   */
  export type UsuarioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to update.
     */
    limit?: number
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
    /**
     * Limit how many Usuarios to delete.
     */
    limit?: number
  }

  /**
   * Usuario.obras
   */
  export type Usuario$obrasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    where?: ObraWhereInput
    orderBy?: ObraOrderByWithRelationInput | ObraOrderByWithRelationInput[]
    cursor?: ObraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObraScalarFieldEnum | ObraScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Usuario
     */
    omit?: UsuarioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Obra
   */

  export type AggregateObra = {
    _count: ObraCountAggregateOutputType | null
    _avg: ObraAvgAggregateOutputType | null
    _sum: ObraSumAggregateOutputType | null
    _min: ObraMinAggregateOutputType | null
    _max: ObraMaxAggregateOutputType | null
  }

  export type ObraAvgAggregateOutputType = {
    id: number | null
    orcamento: number | null
    servidorId: number | null
  }

  export type ObraSumAggregateOutputType = {
    id: number | null
    orcamento: number | null
    servidorId: number | null
  }

  export type ObraMinAggregateOutputType = {
    id: number | null
    nome: string | null
    localizacao: string | null
    empresa: string | null
    cronograma: string | null
    orcamento: number | null
    status: string | null
    criadoEm: Date | null
    servidorId: number | null
  }

  export type ObraMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    localizacao: string | null
    empresa: string | null
    cronograma: string | null
    orcamento: number | null
    status: string | null
    criadoEm: Date | null
    servidorId: number | null
  }

  export type ObraCountAggregateOutputType = {
    id: number
    nome: number
    localizacao: number
    empresa: number
    cronograma: number
    orcamento: number
    status: number
    criadoEm: number
    servidorId: number
    _all: number
  }


  export type ObraAvgAggregateInputType = {
    id?: true
    orcamento?: true
    servidorId?: true
  }

  export type ObraSumAggregateInputType = {
    id?: true
    orcamento?: true
    servidorId?: true
  }

  export type ObraMinAggregateInputType = {
    id?: true
    nome?: true
    localizacao?: true
    empresa?: true
    cronograma?: true
    orcamento?: true
    status?: true
    criadoEm?: true
    servidorId?: true
  }

  export type ObraMaxAggregateInputType = {
    id?: true
    nome?: true
    localizacao?: true
    empresa?: true
    cronograma?: true
    orcamento?: true
    status?: true
    criadoEm?: true
    servidorId?: true
  }

  export type ObraCountAggregateInputType = {
    id?: true
    nome?: true
    localizacao?: true
    empresa?: true
    cronograma?: true
    orcamento?: true
    status?: true
    criadoEm?: true
    servidorId?: true
    _all?: true
  }

  export type ObraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Obra to aggregate.
     */
    where?: ObraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Obras to fetch.
     */
    orderBy?: ObraOrderByWithRelationInput | ObraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ObraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Obras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Obras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Obras
    **/
    _count?: true | ObraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ObraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ObraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObraMaxAggregateInputType
  }

  export type GetObraAggregateType<T extends ObraAggregateArgs> = {
        [P in keyof T & keyof AggregateObra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObra[P]>
      : GetScalarType<T[P], AggregateObra[P]>
  }




  export type ObraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObraWhereInput
    orderBy?: ObraOrderByWithAggregationInput | ObraOrderByWithAggregationInput[]
    by: ObraScalarFieldEnum[] | ObraScalarFieldEnum
    having?: ObraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObraCountAggregateInputType | true
    _avg?: ObraAvgAggregateInputType
    _sum?: ObraSumAggregateInputType
    _min?: ObraMinAggregateInputType
    _max?: ObraMaxAggregateInputType
  }

  export type ObraGroupByOutputType = {
    id: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm: Date
    servidorId: number
    _count: ObraCountAggregateOutputType | null
    _avg: ObraAvgAggregateOutputType | null
    _sum: ObraSumAggregateOutputType | null
    _min: ObraMinAggregateOutputType | null
    _max: ObraMaxAggregateOutputType | null
  }

  type GetObraGroupByPayload<T extends ObraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObraGroupByOutputType[P]>
            : GetScalarType<T[P], ObraGroupByOutputType[P]>
        }
      >
    >


  export type ObraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    localizacao?: boolean
    empresa?: boolean
    cronograma?: boolean
    orcamento?: boolean
    status?: boolean
    criadoEm?: boolean
    servidorId?: boolean
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
    documentos?: boolean | Obra$documentosArgs<ExtArgs>
    etapas?: boolean | Obra$etapasArgs<ExtArgs>
    melhorias?: boolean | Obra$melhoriasArgs<ExtArgs>
    _count?: boolean | ObraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["obra"]>

  export type ObraSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    localizacao?: boolean
    empresa?: boolean
    cronograma?: boolean
    orcamento?: boolean
    status?: boolean
    criadoEm?: boolean
    servidorId?: boolean
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["obra"]>

  export type ObraSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    localizacao?: boolean
    empresa?: boolean
    cronograma?: boolean
    orcamento?: boolean
    status?: boolean
    criadoEm?: boolean
    servidorId?: boolean
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["obra"]>

  export type ObraSelectScalar = {
    id?: boolean
    nome?: boolean
    localizacao?: boolean
    empresa?: boolean
    cronograma?: boolean
    orcamento?: boolean
    status?: boolean
    criadoEm?: boolean
    servidorId?: boolean
  }

  export type ObraOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "localizacao" | "empresa" | "cronograma" | "orcamento" | "status" | "criadoEm" | "servidorId", ExtArgs["result"]["obra"]>
  export type ObraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
    documentos?: boolean | Obra$documentosArgs<ExtArgs>
    etapas?: boolean | Obra$etapasArgs<ExtArgs>
    melhorias?: boolean | Obra$melhoriasArgs<ExtArgs>
    _count?: boolean | ObraCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ObraIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ObraIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    servidor?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ObraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Obra"
    objects: {
      servidor: Prisma.$UsuarioPayload<ExtArgs>
      documentos: Prisma.$DocumentoPayload<ExtArgs>[]
      etapas: Prisma.$EtapaPayload<ExtArgs>[]
      melhorias: Prisma.$MelhoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      localizacao: string
      empresa: string
      cronograma: string
      orcamento: number
      status: string
      criadoEm: Date
      servidorId: number
    }, ExtArgs["result"]["obra"]>
    composites: {}
  }

  type ObraGetPayload<S extends boolean | null | undefined | ObraDefaultArgs> = $Result.GetResult<Prisma.$ObraPayload, S>

  type ObraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ObraFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ObraCountAggregateInputType | true
    }

  export interface ObraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Obra'], meta: { name: 'Obra' } }
    /**
     * Find zero or one Obra that matches the filter.
     * @param {ObraFindUniqueArgs} args - Arguments to find a Obra
     * @example
     * // Get one Obra
     * const obra = await prisma.obra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ObraFindUniqueArgs>(args: SelectSubset<T, ObraFindUniqueArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Obra that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ObraFindUniqueOrThrowArgs} args - Arguments to find a Obra
     * @example
     * // Get one Obra
     * const obra = await prisma.obra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ObraFindUniqueOrThrowArgs>(args: SelectSubset<T, ObraFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Obra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObraFindFirstArgs} args - Arguments to find a Obra
     * @example
     * // Get one Obra
     * const obra = await prisma.obra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ObraFindFirstArgs>(args?: SelectSubset<T, ObraFindFirstArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Obra that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObraFindFirstOrThrowArgs} args - Arguments to find a Obra
     * @example
     * // Get one Obra
     * const obra = await prisma.obra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ObraFindFirstOrThrowArgs>(args?: SelectSubset<T, ObraFindFirstOrThrowArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Obras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObraFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Obras
     * const obras = await prisma.obra.findMany()
     * 
     * // Get first 10 Obras
     * const obras = await prisma.obra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const obraWithIdOnly = await prisma.obra.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ObraFindManyArgs>(args?: SelectSubset<T, ObraFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Obra.
     * @param {ObraCreateArgs} args - Arguments to create a Obra.
     * @example
     * // Create one Obra
     * const Obra = await prisma.obra.create({
     *   data: {
     *     // ... data to create a Obra
     *   }
     * })
     * 
     */
    create<T extends ObraCreateArgs>(args: SelectSubset<T, ObraCreateArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Obras.
     * @param {ObraCreateManyArgs} args - Arguments to create many Obras.
     * @example
     * // Create many Obras
     * const obra = await prisma.obra.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ObraCreateManyArgs>(args?: SelectSubset<T, ObraCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Obras and returns the data saved in the database.
     * @param {ObraCreateManyAndReturnArgs} args - Arguments to create many Obras.
     * @example
     * // Create many Obras
     * const obra = await prisma.obra.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Obras and only return the `id`
     * const obraWithIdOnly = await prisma.obra.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ObraCreateManyAndReturnArgs>(args?: SelectSubset<T, ObraCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Obra.
     * @param {ObraDeleteArgs} args - Arguments to delete one Obra.
     * @example
     * // Delete one Obra
     * const Obra = await prisma.obra.delete({
     *   where: {
     *     // ... filter to delete one Obra
     *   }
     * })
     * 
     */
    delete<T extends ObraDeleteArgs>(args: SelectSubset<T, ObraDeleteArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Obra.
     * @param {ObraUpdateArgs} args - Arguments to update one Obra.
     * @example
     * // Update one Obra
     * const obra = await prisma.obra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ObraUpdateArgs>(args: SelectSubset<T, ObraUpdateArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Obras.
     * @param {ObraDeleteManyArgs} args - Arguments to filter Obras to delete.
     * @example
     * // Delete a few Obras
     * const { count } = await prisma.obra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ObraDeleteManyArgs>(args?: SelectSubset<T, ObraDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Obras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Obras
     * const obra = await prisma.obra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ObraUpdateManyArgs>(args: SelectSubset<T, ObraUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Obras and returns the data updated in the database.
     * @param {ObraUpdateManyAndReturnArgs} args - Arguments to update many Obras.
     * @example
     * // Update many Obras
     * const obra = await prisma.obra.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Obras and only return the `id`
     * const obraWithIdOnly = await prisma.obra.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ObraUpdateManyAndReturnArgs>(args: SelectSubset<T, ObraUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Obra.
     * @param {ObraUpsertArgs} args - Arguments to update or create a Obra.
     * @example
     * // Update or create a Obra
     * const obra = await prisma.obra.upsert({
     *   create: {
     *     // ... data to create a Obra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Obra we want to update
     *   }
     * })
     */
    upsert<T extends ObraUpsertArgs>(args: SelectSubset<T, ObraUpsertArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Obras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObraCountArgs} args - Arguments to filter Obras to count.
     * @example
     * // Count the number of Obras
     * const count = await prisma.obra.count({
     *   where: {
     *     // ... the filter for the Obras we want to count
     *   }
     * })
    **/
    count<T extends ObraCountArgs>(
      args?: Subset<T, ObraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Obra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObraAggregateArgs>(args: Subset<T, ObraAggregateArgs>): Prisma.PrismaPromise<GetObraAggregateType<T>>

    /**
     * Group by Obra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ObraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ObraGroupByArgs['orderBy'] }
        : { orderBy?: ObraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ObraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Obra model
   */
  readonly fields: ObraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Obra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ObraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    servidor<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    documentos<T extends Obra$documentosArgs<ExtArgs> = {}>(args?: Subset<T, Obra$documentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    etapas<T extends Obra$etapasArgs<ExtArgs> = {}>(args?: Subset<T, Obra$etapasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    melhorias<T extends Obra$melhoriasArgs<ExtArgs> = {}>(args?: Subset<T, Obra$melhoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Obra model
   */
  interface ObraFieldRefs {
    readonly id: FieldRef<"Obra", 'Int'>
    readonly nome: FieldRef<"Obra", 'String'>
    readonly localizacao: FieldRef<"Obra", 'String'>
    readonly empresa: FieldRef<"Obra", 'String'>
    readonly cronograma: FieldRef<"Obra", 'String'>
    readonly orcamento: FieldRef<"Obra", 'Float'>
    readonly status: FieldRef<"Obra", 'String'>
    readonly criadoEm: FieldRef<"Obra", 'DateTime'>
    readonly servidorId: FieldRef<"Obra", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Obra findUnique
   */
  export type ObraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * Filter, which Obra to fetch.
     */
    where: ObraWhereUniqueInput
  }

  /**
   * Obra findUniqueOrThrow
   */
  export type ObraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * Filter, which Obra to fetch.
     */
    where: ObraWhereUniqueInput
  }

  /**
   * Obra findFirst
   */
  export type ObraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * Filter, which Obra to fetch.
     */
    where?: ObraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Obras to fetch.
     */
    orderBy?: ObraOrderByWithRelationInput | ObraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Obras.
     */
    cursor?: ObraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Obras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Obras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Obras.
     */
    distinct?: ObraScalarFieldEnum | ObraScalarFieldEnum[]
  }

  /**
   * Obra findFirstOrThrow
   */
  export type ObraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * Filter, which Obra to fetch.
     */
    where?: ObraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Obras to fetch.
     */
    orderBy?: ObraOrderByWithRelationInput | ObraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Obras.
     */
    cursor?: ObraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Obras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Obras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Obras.
     */
    distinct?: ObraScalarFieldEnum | ObraScalarFieldEnum[]
  }

  /**
   * Obra findMany
   */
  export type ObraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * Filter, which Obras to fetch.
     */
    where?: ObraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Obras to fetch.
     */
    orderBy?: ObraOrderByWithRelationInput | ObraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Obras.
     */
    cursor?: ObraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Obras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Obras.
     */
    skip?: number
    distinct?: ObraScalarFieldEnum | ObraScalarFieldEnum[]
  }

  /**
   * Obra create
   */
  export type ObraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * The data needed to create a Obra.
     */
    data: XOR<ObraCreateInput, ObraUncheckedCreateInput>
  }

  /**
   * Obra createMany
   */
  export type ObraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Obras.
     */
    data: ObraCreateManyInput | ObraCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Obra createManyAndReturn
   */
  export type ObraCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * The data used to create many Obras.
     */
    data: ObraCreateManyInput | ObraCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Obra update
   */
  export type ObraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * The data needed to update a Obra.
     */
    data: XOR<ObraUpdateInput, ObraUncheckedUpdateInput>
    /**
     * Choose, which Obra to update.
     */
    where: ObraWhereUniqueInput
  }

  /**
   * Obra updateMany
   */
  export type ObraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Obras.
     */
    data: XOR<ObraUpdateManyMutationInput, ObraUncheckedUpdateManyInput>
    /**
     * Filter which Obras to update
     */
    where?: ObraWhereInput
    /**
     * Limit how many Obras to update.
     */
    limit?: number
  }

  /**
   * Obra updateManyAndReturn
   */
  export type ObraUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * The data used to update Obras.
     */
    data: XOR<ObraUpdateManyMutationInput, ObraUncheckedUpdateManyInput>
    /**
     * Filter which Obras to update
     */
    where?: ObraWhereInput
    /**
     * Limit how many Obras to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Obra upsert
   */
  export type ObraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * The filter to search for the Obra to update in case it exists.
     */
    where: ObraWhereUniqueInput
    /**
     * In case the Obra found by the `where` argument doesn't exist, create a new Obra with this data.
     */
    create: XOR<ObraCreateInput, ObraUncheckedCreateInput>
    /**
     * In case the Obra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ObraUpdateInput, ObraUncheckedUpdateInput>
  }

  /**
   * Obra delete
   */
  export type ObraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    /**
     * Filter which Obra to delete.
     */
    where: ObraWhereUniqueInput
  }

  /**
   * Obra deleteMany
   */
  export type ObraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Obras to delete
     */
    where?: ObraWhereInput
    /**
     * Limit how many Obras to delete.
     */
    limit?: number
  }

  /**
   * Obra.documentos
   */
  export type Obra$documentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    cursor?: DocumentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Obra.etapas
   */
  export type Obra$etapasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    where?: EtapaWhereInput
    orderBy?: EtapaOrderByWithRelationInput | EtapaOrderByWithRelationInput[]
    cursor?: EtapaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EtapaScalarFieldEnum | EtapaScalarFieldEnum[]
  }

  /**
   * Obra.melhorias
   */
  export type Obra$melhoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    where?: MelhoriaWhereInput
    orderBy?: MelhoriaOrderByWithRelationInput | MelhoriaOrderByWithRelationInput[]
    cursor?: MelhoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MelhoriaScalarFieldEnum | MelhoriaScalarFieldEnum[]
  }

  /**
   * Obra without action
   */
  export type ObraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
  }


  /**
   * Model Documento
   */

  export type AggregateDocumento = {
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  export type DocumentoAvgAggregateOutputType = {
    id: number | null
    obraId: number | null
  }

  export type DocumentoSumAggregateOutputType = {
    id: number | null
    obraId: number | null
  }

  export type DocumentoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    url: string | null
    obraId: number | null
  }

  export type DocumentoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    url: string | null
    obraId: number | null
  }

  export type DocumentoCountAggregateOutputType = {
    id: number
    nome: number
    url: number
    obraId: number
    _all: number
  }


  export type DocumentoAvgAggregateInputType = {
    id?: true
    obraId?: true
  }

  export type DocumentoSumAggregateInputType = {
    id?: true
    obraId?: true
  }

  export type DocumentoMinAggregateInputType = {
    id?: true
    nome?: true
    url?: true
    obraId?: true
  }

  export type DocumentoMaxAggregateInputType = {
    id?: true
    nome?: true
    url?: true
    obraId?: true
  }

  export type DocumentoCountAggregateInputType = {
    id?: true
    nome?: true
    url?: true
    obraId?: true
    _all?: true
  }

  export type DocumentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documento to aggregate.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documentos
    **/
    _count?: true | DocumentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DocumentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DocumentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentoMaxAggregateInputType
  }

  export type GetDocumentoAggregateType<T extends DocumentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDocumento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocumento[P]>
      : GetScalarType<T[P], AggregateDocumento[P]>
  }




  export type DocumentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentoWhereInput
    orderBy?: DocumentoOrderByWithAggregationInput | DocumentoOrderByWithAggregationInput[]
    by: DocumentoScalarFieldEnum[] | DocumentoScalarFieldEnum
    having?: DocumentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentoCountAggregateInputType | true
    _avg?: DocumentoAvgAggregateInputType
    _sum?: DocumentoSumAggregateInputType
    _min?: DocumentoMinAggregateInputType
    _max?: DocumentoMaxAggregateInputType
  }

  export type DocumentoGroupByOutputType = {
    id: number
    nome: string
    url: string
    obraId: number
    _count: DocumentoCountAggregateOutputType | null
    _avg: DocumentoAvgAggregateOutputType | null
    _sum: DocumentoSumAggregateOutputType | null
    _min: DocumentoMinAggregateOutputType | null
    _max: DocumentoMaxAggregateOutputType | null
  }

  type GetDocumentoGroupByPayload<T extends DocumentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentoGroupByOutputType[P]>
        }
      >
    >


  export type DocumentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    url?: boolean
    obraId?: boolean
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documento"]>

  export type DocumentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    url?: boolean
    obraId?: boolean
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documento"]>

  export type DocumentoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    url?: boolean
    obraId?: boolean
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["documento"]>

  export type DocumentoSelectScalar = {
    id?: boolean
    nome?: boolean
    url?: boolean
    obraId?: boolean
  }

  export type DocumentoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "url" | "obraId", ExtArgs["result"]["documento"]>
  export type DocumentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }
  export type DocumentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }
  export type DocumentoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }

  export type $DocumentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Documento"
    objects: {
      obra: Prisma.$ObraPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      url: string
      obraId: number
    }, ExtArgs["result"]["documento"]>
    composites: {}
  }

  type DocumentoGetPayload<S extends boolean | null | undefined | DocumentoDefaultArgs> = $Result.GetResult<Prisma.$DocumentoPayload, S>

  type DocumentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DocumentoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DocumentoCountAggregateInputType | true
    }

  export interface DocumentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Documento'], meta: { name: 'Documento' } }
    /**
     * Find zero or one Documento that matches the filter.
     * @param {DocumentoFindUniqueArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentoFindUniqueArgs>(args: SelectSubset<T, DocumentoFindUniqueArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Documento that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DocumentoFindUniqueOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentoFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Documento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentoFindFirstArgs>(args?: SelectSubset<T, DocumentoFindFirstArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Documento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindFirstOrThrowArgs} args - Arguments to find a Documento
     * @example
     * // Get one Documento
     * const documento = await prisma.documento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentoFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Documentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documentos
     * const documentos = await prisma.documento.findMany()
     * 
     * // Get first 10 Documentos
     * const documentos = await prisma.documento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentoWithIdOnly = await prisma.documento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentoFindManyArgs>(args?: SelectSubset<T, DocumentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Documento.
     * @param {DocumentoCreateArgs} args - Arguments to create a Documento.
     * @example
     * // Create one Documento
     * const Documento = await prisma.documento.create({
     *   data: {
     *     // ... data to create a Documento
     *   }
     * })
     * 
     */
    create<T extends DocumentoCreateArgs>(args: SelectSubset<T, DocumentoCreateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Documentos.
     * @param {DocumentoCreateManyArgs} args - Arguments to create many Documentos.
     * @example
     * // Create many Documentos
     * const documento = await prisma.documento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentoCreateManyArgs>(args?: SelectSubset<T, DocumentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documentos and returns the data saved in the database.
     * @param {DocumentoCreateManyAndReturnArgs} args - Arguments to create many Documentos.
     * @example
     * // Create many Documentos
     * const documento = await prisma.documento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documentos and only return the `id`
     * const documentoWithIdOnly = await prisma.documento.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentoCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Documento.
     * @param {DocumentoDeleteArgs} args - Arguments to delete one Documento.
     * @example
     * // Delete one Documento
     * const Documento = await prisma.documento.delete({
     *   where: {
     *     // ... filter to delete one Documento
     *   }
     * })
     * 
     */
    delete<T extends DocumentoDeleteArgs>(args: SelectSubset<T, DocumentoDeleteArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Documento.
     * @param {DocumentoUpdateArgs} args - Arguments to update one Documento.
     * @example
     * // Update one Documento
     * const documento = await prisma.documento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentoUpdateArgs>(args: SelectSubset<T, DocumentoUpdateArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Documentos.
     * @param {DocumentoDeleteManyArgs} args - Arguments to filter Documentos to delete.
     * @example
     * // Delete a few Documentos
     * const { count } = await prisma.documento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentoDeleteManyArgs>(args?: SelectSubset<T, DocumentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documentos
     * const documento = await prisma.documento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentoUpdateManyArgs>(args: SelectSubset<T, DocumentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documentos and returns the data updated in the database.
     * @param {DocumentoUpdateManyAndReturnArgs} args - Arguments to update many Documentos.
     * @example
     * // Update many Documentos
     * const documento = await prisma.documento.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Documentos and only return the `id`
     * const documentoWithIdOnly = await prisma.documento.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DocumentoUpdateManyAndReturnArgs>(args: SelectSubset<T, DocumentoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Documento.
     * @param {DocumentoUpsertArgs} args - Arguments to update or create a Documento.
     * @example
     * // Update or create a Documento
     * const documento = await prisma.documento.upsert({
     *   create: {
     *     // ... data to create a Documento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Documento we want to update
     *   }
     * })
     */
    upsert<T extends DocumentoUpsertArgs>(args: SelectSubset<T, DocumentoUpsertArgs<ExtArgs>>): Prisma__DocumentoClient<$Result.GetResult<Prisma.$DocumentoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Documentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoCountArgs} args - Arguments to filter Documentos to count.
     * @example
     * // Count the number of Documentos
     * const count = await prisma.documento.count({
     *   where: {
     *     // ... the filter for the Documentos we want to count
     *   }
     * })
    **/
    count<T extends DocumentoCountArgs>(
      args?: Subset<T, DocumentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentoAggregateArgs>(args: Subset<T, DocumentoAggregateArgs>): Prisma.PrismaPromise<GetDocumentoAggregateType<T>>

    /**
     * Group by Documento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentoGroupByArgs['orderBy'] }
        : { orderBy?: DocumentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Documento model
   */
  readonly fields: DocumentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Documento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    obra<T extends ObraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ObraDefaultArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Documento model
   */
  interface DocumentoFieldRefs {
    readonly id: FieldRef<"Documento", 'Int'>
    readonly nome: FieldRef<"Documento", 'String'>
    readonly url: FieldRef<"Documento", 'String'>
    readonly obraId: FieldRef<"Documento", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Documento findUnique
   */
  export type DocumentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findUniqueOrThrow
   */
  export type DocumentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento findFirst
   */
  export type DocumentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findFirstOrThrow
   */
  export type DocumentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documento to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documentos.
     */
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento findMany
   */
  export type DocumentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter, which Documentos to fetch.
     */
    where?: DocumentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documentos to fetch.
     */
    orderBy?: DocumentoOrderByWithRelationInput | DocumentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documentos.
     */
    cursor?: DocumentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documentos.
     */
    skip?: number
    distinct?: DocumentoScalarFieldEnum | DocumentoScalarFieldEnum[]
  }

  /**
   * Documento create
   */
  export type DocumentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Documento.
     */
    data: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
  }

  /**
   * Documento createMany
   */
  export type DocumentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documentos.
     */
    data: DocumentoCreateManyInput | DocumentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Documento createManyAndReturn
   */
  export type DocumentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * The data used to create many Documentos.
     */
    data: DocumentoCreateManyInput | DocumentoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Documento update
   */
  export type DocumentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Documento.
     */
    data: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
    /**
     * Choose, which Documento to update.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento updateMany
   */
  export type DocumentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documentos.
     */
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyInput>
    /**
     * Filter which Documentos to update
     */
    where?: DocumentoWhereInput
    /**
     * Limit how many Documentos to update.
     */
    limit?: number
  }

  /**
   * Documento updateManyAndReturn
   */
  export type DocumentoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * The data used to update Documentos.
     */
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyInput>
    /**
     * Filter which Documentos to update
     */
    where?: DocumentoWhereInput
    /**
     * Limit how many Documentos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Documento upsert
   */
  export type DocumentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Documento to update in case it exists.
     */
    where: DocumentoWhereUniqueInput
    /**
     * In case the Documento found by the `where` argument doesn't exist, create a new Documento with this data.
     */
    create: XOR<DocumentoCreateInput, DocumentoUncheckedCreateInput>
    /**
     * In case the Documento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentoUpdateInput, DocumentoUncheckedUpdateInput>
  }

  /**
   * Documento delete
   */
  export type DocumentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
    /**
     * Filter which Documento to delete.
     */
    where: DocumentoWhereUniqueInput
  }

  /**
   * Documento deleteMany
   */
  export type DocumentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documentos to delete
     */
    where?: DocumentoWhereInput
    /**
     * Limit how many Documentos to delete.
     */
    limit?: number
  }

  /**
   * Documento without action
   */
  export type DocumentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Documento
     */
    select?: DocumentoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Documento
     */
    omit?: DocumentoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentoInclude<ExtArgs> | null
  }


  /**
   * Model Etapa
   */

  export type AggregateEtapa = {
    _count: EtapaCountAggregateOutputType | null
    _avg: EtapaAvgAggregateOutputType | null
    _sum: EtapaSumAggregateOutputType | null
    _min: EtapaMinAggregateOutputType | null
    _max: EtapaMaxAggregateOutputType | null
  }

  export type EtapaAvgAggregateOutputType = {
    id: number | null
    obraId: number | null
  }

  export type EtapaSumAggregateOutputType = {
    id: number | null
    obraId: number | null
  }

  export type EtapaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    status: string | null
    obraId: number | null
  }

  export type EtapaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    status: string | null
    obraId: number | null
  }

  export type EtapaCountAggregateOutputType = {
    id: number
    nome: number
    status: number
    obraId: number
    _all: number
  }


  export type EtapaAvgAggregateInputType = {
    id?: true
    obraId?: true
  }

  export type EtapaSumAggregateInputType = {
    id?: true
    obraId?: true
  }

  export type EtapaMinAggregateInputType = {
    id?: true
    nome?: true
    status?: true
    obraId?: true
  }

  export type EtapaMaxAggregateInputType = {
    id?: true
    nome?: true
    status?: true
    obraId?: true
  }

  export type EtapaCountAggregateInputType = {
    id?: true
    nome?: true
    status?: true
    obraId?: true
    _all?: true
  }

  export type EtapaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Etapa to aggregate.
     */
    where?: EtapaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Etapas to fetch.
     */
    orderBy?: EtapaOrderByWithRelationInput | EtapaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EtapaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Etapas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Etapas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Etapas
    **/
    _count?: true | EtapaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EtapaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EtapaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EtapaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EtapaMaxAggregateInputType
  }

  export type GetEtapaAggregateType<T extends EtapaAggregateArgs> = {
        [P in keyof T & keyof AggregateEtapa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEtapa[P]>
      : GetScalarType<T[P], AggregateEtapa[P]>
  }




  export type EtapaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EtapaWhereInput
    orderBy?: EtapaOrderByWithAggregationInput | EtapaOrderByWithAggregationInput[]
    by: EtapaScalarFieldEnum[] | EtapaScalarFieldEnum
    having?: EtapaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EtapaCountAggregateInputType | true
    _avg?: EtapaAvgAggregateInputType
    _sum?: EtapaSumAggregateInputType
    _min?: EtapaMinAggregateInputType
    _max?: EtapaMaxAggregateInputType
  }

  export type EtapaGroupByOutputType = {
    id: number
    nome: string
    status: string
    obraId: number
    _count: EtapaCountAggregateOutputType | null
    _avg: EtapaAvgAggregateOutputType | null
    _sum: EtapaSumAggregateOutputType | null
    _min: EtapaMinAggregateOutputType | null
    _max: EtapaMaxAggregateOutputType | null
  }

  type GetEtapaGroupByPayload<T extends EtapaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EtapaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EtapaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EtapaGroupByOutputType[P]>
            : GetScalarType<T[P], EtapaGroupByOutputType[P]>
        }
      >
    >


  export type EtapaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    status?: boolean
    obraId?: boolean
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["etapa"]>

  export type EtapaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    status?: boolean
    obraId?: boolean
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["etapa"]>

  export type EtapaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    status?: boolean
    obraId?: boolean
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["etapa"]>

  export type EtapaSelectScalar = {
    id?: boolean
    nome?: boolean
    status?: boolean
    obraId?: boolean
  }

  export type EtapaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "status" | "obraId", ExtArgs["result"]["etapa"]>
  export type EtapaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }
  export type EtapaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }
  export type EtapaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | ObraDefaultArgs<ExtArgs>
  }

  export type $EtapaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Etapa"
    objects: {
      obra: Prisma.$ObraPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      status: string
      obraId: number
    }, ExtArgs["result"]["etapa"]>
    composites: {}
  }

  type EtapaGetPayload<S extends boolean | null | undefined | EtapaDefaultArgs> = $Result.GetResult<Prisma.$EtapaPayload, S>

  type EtapaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EtapaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EtapaCountAggregateInputType | true
    }

  export interface EtapaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Etapa'], meta: { name: 'Etapa' } }
    /**
     * Find zero or one Etapa that matches the filter.
     * @param {EtapaFindUniqueArgs} args - Arguments to find a Etapa
     * @example
     * // Get one Etapa
     * const etapa = await prisma.etapa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EtapaFindUniqueArgs>(args: SelectSubset<T, EtapaFindUniqueArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Etapa that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EtapaFindUniqueOrThrowArgs} args - Arguments to find a Etapa
     * @example
     * // Get one Etapa
     * const etapa = await prisma.etapa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EtapaFindUniqueOrThrowArgs>(args: SelectSubset<T, EtapaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Etapa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaFindFirstArgs} args - Arguments to find a Etapa
     * @example
     * // Get one Etapa
     * const etapa = await prisma.etapa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EtapaFindFirstArgs>(args?: SelectSubset<T, EtapaFindFirstArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Etapa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaFindFirstOrThrowArgs} args - Arguments to find a Etapa
     * @example
     * // Get one Etapa
     * const etapa = await prisma.etapa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EtapaFindFirstOrThrowArgs>(args?: SelectSubset<T, EtapaFindFirstOrThrowArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Etapas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Etapas
     * const etapas = await prisma.etapa.findMany()
     * 
     * // Get first 10 Etapas
     * const etapas = await prisma.etapa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const etapaWithIdOnly = await prisma.etapa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EtapaFindManyArgs>(args?: SelectSubset<T, EtapaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Etapa.
     * @param {EtapaCreateArgs} args - Arguments to create a Etapa.
     * @example
     * // Create one Etapa
     * const Etapa = await prisma.etapa.create({
     *   data: {
     *     // ... data to create a Etapa
     *   }
     * })
     * 
     */
    create<T extends EtapaCreateArgs>(args: SelectSubset<T, EtapaCreateArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Etapas.
     * @param {EtapaCreateManyArgs} args - Arguments to create many Etapas.
     * @example
     * // Create many Etapas
     * const etapa = await prisma.etapa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EtapaCreateManyArgs>(args?: SelectSubset<T, EtapaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Etapas and returns the data saved in the database.
     * @param {EtapaCreateManyAndReturnArgs} args - Arguments to create many Etapas.
     * @example
     * // Create many Etapas
     * const etapa = await prisma.etapa.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Etapas and only return the `id`
     * const etapaWithIdOnly = await prisma.etapa.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EtapaCreateManyAndReturnArgs>(args?: SelectSubset<T, EtapaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Etapa.
     * @param {EtapaDeleteArgs} args - Arguments to delete one Etapa.
     * @example
     * // Delete one Etapa
     * const Etapa = await prisma.etapa.delete({
     *   where: {
     *     // ... filter to delete one Etapa
     *   }
     * })
     * 
     */
    delete<T extends EtapaDeleteArgs>(args: SelectSubset<T, EtapaDeleteArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Etapa.
     * @param {EtapaUpdateArgs} args - Arguments to update one Etapa.
     * @example
     * // Update one Etapa
     * const etapa = await prisma.etapa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EtapaUpdateArgs>(args: SelectSubset<T, EtapaUpdateArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Etapas.
     * @param {EtapaDeleteManyArgs} args - Arguments to filter Etapas to delete.
     * @example
     * // Delete a few Etapas
     * const { count } = await prisma.etapa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EtapaDeleteManyArgs>(args?: SelectSubset<T, EtapaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Etapas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Etapas
     * const etapa = await prisma.etapa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EtapaUpdateManyArgs>(args: SelectSubset<T, EtapaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Etapas and returns the data updated in the database.
     * @param {EtapaUpdateManyAndReturnArgs} args - Arguments to update many Etapas.
     * @example
     * // Update many Etapas
     * const etapa = await prisma.etapa.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Etapas and only return the `id`
     * const etapaWithIdOnly = await prisma.etapa.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EtapaUpdateManyAndReturnArgs>(args: SelectSubset<T, EtapaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Etapa.
     * @param {EtapaUpsertArgs} args - Arguments to update or create a Etapa.
     * @example
     * // Update or create a Etapa
     * const etapa = await prisma.etapa.upsert({
     *   create: {
     *     // ... data to create a Etapa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Etapa we want to update
     *   }
     * })
     */
    upsert<T extends EtapaUpsertArgs>(args: SelectSubset<T, EtapaUpsertArgs<ExtArgs>>): Prisma__EtapaClient<$Result.GetResult<Prisma.$EtapaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Etapas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaCountArgs} args - Arguments to filter Etapas to count.
     * @example
     * // Count the number of Etapas
     * const count = await prisma.etapa.count({
     *   where: {
     *     // ... the filter for the Etapas we want to count
     *   }
     * })
    **/
    count<T extends EtapaCountArgs>(
      args?: Subset<T, EtapaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EtapaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Etapa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EtapaAggregateArgs>(args: Subset<T, EtapaAggregateArgs>): Prisma.PrismaPromise<GetEtapaAggregateType<T>>

    /**
     * Group by Etapa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EtapaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EtapaGroupByArgs['orderBy'] }
        : { orderBy?: EtapaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EtapaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEtapaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Etapa model
   */
  readonly fields: EtapaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Etapa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EtapaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    obra<T extends ObraDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ObraDefaultArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Etapa model
   */
  interface EtapaFieldRefs {
    readonly id: FieldRef<"Etapa", 'Int'>
    readonly nome: FieldRef<"Etapa", 'String'>
    readonly status: FieldRef<"Etapa", 'String'>
    readonly obraId: FieldRef<"Etapa", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Etapa findUnique
   */
  export type EtapaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * Filter, which Etapa to fetch.
     */
    where: EtapaWhereUniqueInput
  }

  /**
   * Etapa findUniqueOrThrow
   */
  export type EtapaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * Filter, which Etapa to fetch.
     */
    where: EtapaWhereUniqueInput
  }

  /**
   * Etapa findFirst
   */
  export type EtapaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * Filter, which Etapa to fetch.
     */
    where?: EtapaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Etapas to fetch.
     */
    orderBy?: EtapaOrderByWithRelationInput | EtapaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Etapas.
     */
    cursor?: EtapaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Etapas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Etapas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Etapas.
     */
    distinct?: EtapaScalarFieldEnum | EtapaScalarFieldEnum[]
  }

  /**
   * Etapa findFirstOrThrow
   */
  export type EtapaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * Filter, which Etapa to fetch.
     */
    where?: EtapaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Etapas to fetch.
     */
    orderBy?: EtapaOrderByWithRelationInput | EtapaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Etapas.
     */
    cursor?: EtapaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Etapas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Etapas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Etapas.
     */
    distinct?: EtapaScalarFieldEnum | EtapaScalarFieldEnum[]
  }

  /**
   * Etapa findMany
   */
  export type EtapaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * Filter, which Etapas to fetch.
     */
    where?: EtapaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Etapas to fetch.
     */
    orderBy?: EtapaOrderByWithRelationInput | EtapaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Etapas.
     */
    cursor?: EtapaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Etapas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Etapas.
     */
    skip?: number
    distinct?: EtapaScalarFieldEnum | EtapaScalarFieldEnum[]
  }

  /**
   * Etapa create
   */
  export type EtapaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * The data needed to create a Etapa.
     */
    data: XOR<EtapaCreateInput, EtapaUncheckedCreateInput>
  }

  /**
   * Etapa createMany
   */
  export type EtapaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Etapas.
     */
    data: EtapaCreateManyInput | EtapaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Etapa createManyAndReturn
   */
  export type EtapaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * The data used to create many Etapas.
     */
    data: EtapaCreateManyInput | EtapaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Etapa update
   */
  export type EtapaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * The data needed to update a Etapa.
     */
    data: XOR<EtapaUpdateInput, EtapaUncheckedUpdateInput>
    /**
     * Choose, which Etapa to update.
     */
    where: EtapaWhereUniqueInput
  }

  /**
   * Etapa updateMany
   */
  export type EtapaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Etapas.
     */
    data: XOR<EtapaUpdateManyMutationInput, EtapaUncheckedUpdateManyInput>
    /**
     * Filter which Etapas to update
     */
    where?: EtapaWhereInput
    /**
     * Limit how many Etapas to update.
     */
    limit?: number
  }

  /**
   * Etapa updateManyAndReturn
   */
  export type EtapaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * The data used to update Etapas.
     */
    data: XOR<EtapaUpdateManyMutationInput, EtapaUncheckedUpdateManyInput>
    /**
     * Filter which Etapas to update
     */
    where?: EtapaWhereInput
    /**
     * Limit how many Etapas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Etapa upsert
   */
  export type EtapaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * The filter to search for the Etapa to update in case it exists.
     */
    where: EtapaWhereUniqueInput
    /**
     * In case the Etapa found by the `where` argument doesn't exist, create a new Etapa with this data.
     */
    create: XOR<EtapaCreateInput, EtapaUncheckedCreateInput>
    /**
     * In case the Etapa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EtapaUpdateInput, EtapaUncheckedUpdateInput>
  }

  /**
   * Etapa delete
   */
  export type EtapaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
    /**
     * Filter which Etapa to delete.
     */
    where: EtapaWhereUniqueInput
  }

  /**
   * Etapa deleteMany
   */
  export type EtapaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Etapas to delete
     */
    where?: EtapaWhereInput
    /**
     * Limit how many Etapas to delete.
     */
    limit?: number
  }

  /**
   * Etapa without action
   */
  export type EtapaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Etapa
     */
    select?: EtapaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Etapa
     */
    omit?: EtapaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EtapaInclude<ExtArgs> | null
  }


  /**
   * Model Melhoria
   */

  export type AggregateMelhoria = {
    _count: MelhoriaCountAggregateOutputType | null
    _avg: MelhoriaAvgAggregateOutputType | null
    _sum: MelhoriaSumAggregateOutputType | null
    _min: MelhoriaMinAggregateOutputType | null
    _max: MelhoriaMaxAggregateOutputType | null
  }

  export type MelhoriaAvgAggregateOutputType = {
    id: number | null
    obraId: number | null
  }

  export type MelhoriaSumAggregateOutputType = {
    id: number | null
    obraId: number | null
  }

  export type MelhoriaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    mensagem: string | null
    tipo: string | null
    obraId: number | null
    criadoEm: Date | null
  }

  export type MelhoriaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    mensagem: string | null
    tipo: string | null
    obraId: number | null
    criadoEm: Date | null
  }

  export type MelhoriaCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    mensagem: number
    tipo: number
    obraId: number
    criadoEm: number
    _all: number
  }


  export type MelhoriaAvgAggregateInputType = {
    id?: true
    obraId?: true
  }

  export type MelhoriaSumAggregateInputType = {
    id?: true
    obraId?: true
  }

  export type MelhoriaMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    mensagem?: true
    tipo?: true
    obraId?: true
    criadoEm?: true
  }

  export type MelhoriaMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    mensagem?: true
    tipo?: true
    obraId?: true
    criadoEm?: true
  }

  export type MelhoriaCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    mensagem?: true
    tipo?: true
    obraId?: true
    criadoEm?: true
    _all?: true
  }

  export type MelhoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Melhoria to aggregate.
     */
    where?: MelhoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Melhorias to fetch.
     */
    orderBy?: MelhoriaOrderByWithRelationInput | MelhoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MelhoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Melhorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Melhorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Melhorias
    **/
    _count?: true | MelhoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MelhoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MelhoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MelhoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MelhoriaMaxAggregateInputType
  }

  export type GetMelhoriaAggregateType<T extends MelhoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateMelhoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMelhoria[P]>
      : GetScalarType<T[P], AggregateMelhoria[P]>
  }




  export type MelhoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MelhoriaWhereInput
    orderBy?: MelhoriaOrderByWithAggregationInput | MelhoriaOrderByWithAggregationInput[]
    by: MelhoriaScalarFieldEnum[] | MelhoriaScalarFieldEnum
    having?: MelhoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MelhoriaCountAggregateInputType | true
    _avg?: MelhoriaAvgAggregateInputType
    _sum?: MelhoriaSumAggregateInputType
    _min?: MelhoriaMinAggregateInputType
    _max?: MelhoriaMaxAggregateInputType
  }

  export type MelhoriaGroupByOutputType = {
    id: number
    nome: string | null
    email: string | null
    mensagem: string
    tipo: string
    obraId: number | null
    criadoEm: Date
    _count: MelhoriaCountAggregateOutputType | null
    _avg: MelhoriaAvgAggregateOutputType | null
    _sum: MelhoriaSumAggregateOutputType | null
    _min: MelhoriaMinAggregateOutputType | null
    _max: MelhoriaMaxAggregateOutputType | null
  }

  type GetMelhoriaGroupByPayload<T extends MelhoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MelhoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MelhoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MelhoriaGroupByOutputType[P]>
            : GetScalarType<T[P], MelhoriaGroupByOutputType[P]>
        }
      >
    >


  export type MelhoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    mensagem?: boolean
    tipo?: boolean
    obraId?: boolean
    criadoEm?: boolean
    obra?: boolean | Melhoria$obraArgs<ExtArgs>
  }, ExtArgs["result"]["melhoria"]>

  export type MelhoriaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    mensagem?: boolean
    tipo?: boolean
    obraId?: boolean
    criadoEm?: boolean
    obra?: boolean | Melhoria$obraArgs<ExtArgs>
  }, ExtArgs["result"]["melhoria"]>

  export type MelhoriaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    mensagem?: boolean
    tipo?: boolean
    obraId?: boolean
    criadoEm?: boolean
    obra?: boolean | Melhoria$obraArgs<ExtArgs>
  }, ExtArgs["result"]["melhoria"]>

  export type MelhoriaSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    mensagem?: boolean
    tipo?: boolean
    obraId?: boolean
    criadoEm?: boolean
  }

  export type MelhoriaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "email" | "mensagem" | "tipo" | "obraId" | "criadoEm", ExtArgs["result"]["melhoria"]>
  export type MelhoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | Melhoria$obraArgs<ExtArgs>
  }
  export type MelhoriaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | Melhoria$obraArgs<ExtArgs>
  }
  export type MelhoriaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    obra?: boolean | Melhoria$obraArgs<ExtArgs>
  }

  export type $MelhoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Melhoria"
    objects: {
      obra: Prisma.$ObraPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string | null
      email: string | null
      mensagem: string
      tipo: string
      obraId: number | null
      criadoEm: Date
    }, ExtArgs["result"]["melhoria"]>
    composites: {}
  }

  type MelhoriaGetPayload<S extends boolean | null | undefined | MelhoriaDefaultArgs> = $Result.GetResult<Prisma.$MelhoriaPayload, S>

  type MelhoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MelhoriaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MelhoriaCountAggregateInputType | true
    }

  export interface MelhoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Melhoria'], meta: { name: 'Melhoria' } }
    /**
     * Find zero or one Melhoria that matches the filter.
     * @param {MelhoriaFindUniqueArgs} args - Arguments to find a Melhoria
     * @example
     * // Get one Melhoria
     * const melhoria = await prisma.melhoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MelhoriaFindUniqueArgs>(args: SelectSubset<T, MelhoriaFindUniqueArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Melhoria that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MelhoriaFindUniqueOrThrowArgs} args - Arguments to find a Melhoria
     * @example
     * // Get one Melhoria
     * const melhoria = await prisma.melhoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MelhoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, MelhoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Melhoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MelhoriaFindFirstArgs} args - Arguments to find a Melhoria
     * @example
     * // Get one Melhoria
     * const melhoria = await prisma.melhoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MelhoriaFindFirstArgs>(args?: SelectSubset<T, MelhoriaFindFirstArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Melhoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MelhoriaFindFirstOrThrowArgs} args - Arguments to find a Melhoria
     * @example
     * // Get one Melhoria
     * const melhoria = await prisma.melhoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MelhoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, MelhoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Melhorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MelhoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Melhorias
     * const melhorias = await prisma.melhoria.findMany()
     * 
     * // Get first 10 Melhorias
     * const melhorias = await prisma.melhoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const melhoriaWithIdOnly = await prisma.melhoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MelhoriaFindManyArgs>(args?: SelectSubset<T, MelhoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Melhoria.
     * @param {MelhoriaCreateArgs} args - Arguments to create a Melhoria.
     * @example
     * // Create one Melhoria
     * const Melhoria = await prisma.melhoria.create({
     *   data: {
     *     // ... data to create a Melhoria
     *   }
     * })
     * 
     */
    create<T extends MelhoriaCreateArgs>(args: SelectSubset<T, MelhoriaCreateArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Melhorias.
     * @param {MelhoriaCreateManyArgs} args - Arguments to create many Melhorias.
     * @example
     * // Create many Melhorias
     * const melhoria = await prisma.melhoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MelhoriaCreateManyArgs>(args?: SelectSubset<T, MelhoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Melhorias and returns the data saved in the database.
     * @param {MelhoriaCreateManyAndReturnArgs} args - Arguments to create many Melhorias.
     * @example
     * // Create many Melhorias
     * const melhoria = await prisma.melhoria.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Melhorias and only return the `id`
     * const melhoriaWithIdOnly = await prisma.melhoria.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MelhoriaCreateManyAndReturnArgs>(args?: SelectSubset<T, MelhoriaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Melhoria.
     * @param {MelhoriaDeleteArgs} args - Arguments to delete one Melhoria.
     * @example
     * // Delete one Melhoria
     * const Melhoria = await prisma.melhoria.delete({
     *   where: {
     *     // ... filter to delete one Melhoria
     *   }
     * })
     * 
     */
    delete<T extends MelhoriaDeleteArgs>(args: SelectSubset<T, MelhoriaDeleteArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Melhoria.
     * @param {MelhoriaUpdateArgs} args - Arguments to update one Melhoria.
     * @example
     * // Update one Melhoria
     * const melhoria = await prisma.melhoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MelhoriaUpdateArgs>(args: SelectSubset<T, MelhoriaUpdateArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Melhorias.
     * @param {MelhoriaDeleteManyArgs} args - Arguments to filter Melhorias to delete.
     * @example
     * // Delete a few Melhorias
     * const { count } = await prisma.melhoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MelhoriaDeleteManyArgs>(args?: SelectSubset<T, MelhoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Melhorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MelhoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Melhorias
     * const melhoria = await prisma.melhoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MelhoriaUpdateManyArgs>(args: SelectSubset<T, MelhoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Melhorias and returns the data updated in the database.
     * @param {MelhoriaUpdateManyAndReturnArgs} args - Arguments to update many Melhorias.
     * @example
     * // Update many Melhorias
     * const melhoria = await prisma.melhoria.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Melhorias and only return the `id`
     * const melhoriaWithIdOnly = await prisma.melhoria.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MelhoriaUpdateManyAndReturnArgs>(args: SelectSubset<T, MelhoriaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Melhoria.
     * @param {MelhoriaUpsertArgs} args - Arguments to update or create a Melhoria.
     * @example
     * // Update or create a Melhoria
     * const melhoria = await prisma.melhoria.upsert({
     *   create: {
     *     // ... data to create a Melhoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Melhoria we want to update
     *   }
     * })
     */
    upsert<T extends MelhoriaUpsertArgs>(args: SelectSubset<T, MelhoriaUpsertArgs<ExtArgs>>): Prisma__MelhoriaClient<$Result.GetResult<Prisma.$MelhoriaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Melhorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MelhoriaCountArgs} args - Arguments to filter Melhorias to count.
     * @example
     * // Count the number of Melhorias
     * const count = await prisma.melhoria.count({
     *   where: {
     *     // ... the filter for the Melhorias we want to count
     *   }
     * })
    **/
    count<T extends MelhoriaCountArgs>(
      args?: Subset<T, MelhoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MelhoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Melhoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MelhoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MelhoriaAggregateArgs>(args: Subset<T, MelhoriaAggregateArgs>): Prisma.PrismaPromise<GetMelhoriaAggregateType<T>>

    /**
     * Group by Melhoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MelhoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MelhoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MelhoriaGroupByArgs['orderBy'] }
        : { orderBy?: MelhoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MelhoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMelhoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Melhoria model
   */
  readonly fields: MelhoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Melhoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MelhoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    obra<T extends Melhoria$obraArgs<ExtArgs> = {}>(args?: Subset<T, Melhoria$obraArgs<ExtArgs>>): Prisma__ObraClient<$Result.GetResult<Prisma.$ObraPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Melhoria model
   */
  interface MelhoriaFieldRefs {
    readonly id: FieldRef<"Melhoria", 'Int'>
    readonly nome: FieldRef<"Melhoria", 'String'>
    readonly email: FieldRef<"Melhoria", 'String'>
    readonly mensagem: FieldRef<"Melhoria", 'String'>
    readonly tipo: FieldRef<"Melhoria", 'String'>
    readonly obraId: FieldRef<"Melhoria", 'Int'>
    readonly criadoEm: FieldRef<"Melhoria", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Melhoria findUnique
   */
  export type MelhoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * Filter, which Melhoria to fetch.
     */
    where: MelhoriaWhereUniqueInput
  }

  /**
   * Melhoria findUniqueOrThrow
   */
  export type MelhoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * Filter, which Melhoria to fetch.
     */
    where: MelhoriaWhereUniqueInput
  }

  /**
   * Melhoria findFirst
   */
  export type MelhoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * Filter, which Melhoria to fetch.
     */
    where?: MelhoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Melhorias to fetch.
     */
    orderBy?: MelhoriaOrderByWithRelationInput | MelhoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Melhorias.
     */
    cursor?: MelhoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Melhorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Melhorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Melhorias.
     */
    distinct?: MelhoriaScalarFieldEnum | MelhoriaScalarFieldEnum[]
  }

  /**
   * Melhoria findFirstOrThrow
   */
  export type MelhoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * Filter, which Melhoria to fetch.
     */
    where?: MelhoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Melhorias to fetch.
     */
    orderBy?: MelhoriaOrderByWithRelationInput | MelhoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Melhorias.
     */
    cursor?: MelhoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Melhorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Melhorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Melhorias.
     */
    distinct?: MelhoriaScalarFieldEnum | MelhoriaScalarFieldEnum[]
  }

  /**
   * Melhoria findMany
   */
  export type MelhoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * Filter, which Melhorias to fetch.
     */
    where?: MelhoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Melhorias to fetch.
     */
    orderBy?: MelhoriaOrderByWithRelationInput | MelhoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Melhorias.
     */
    cursor?: MelhoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Melhorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Melhorias.
     */
    skip?: number
    distinct?: MelhoriaScalarFieldEnum | MelhoriaScalarFieldEnum[]
  }

  /**
   * Melhoria create
   */
  export type MelhoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Melhoria.
     */
    data: XOR<MelhoriaCreateInput, MelhoriaUncheckedCreateInput>
  }

  /**
   * Melhoria createMany
   */
  export type MelhoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Melhorias.
     */
    data: MelhoriaCreateManyInput | MelhoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Melhoria createManyAndReturn
   */
  export type MelhoriaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * The data used to create many Melhorias.
     */
    data: MelhoriaCreateManyInput | MelhoriaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Melhoria update
   */
  export type MelhoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Melhoria.
     */
    data: XOR<MelhoriaUpdateInput, MelhoriaUncheckedUpdateInput>
    /**
     * Choose, which Melhoria to update.
     */
    where: MelhoriaWhereUniqueInput
  }

  /**
   * Melhoria updateMany
   */
  export type MelhoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Melhorias.
     */
    data: XOR<MelhoriaUpdateManyMutationInput, MelhoriaUncheckedUpdateManyInput>
    /**
     * Filter which Melhorias to update
     */
    where?: MelhoriaWhereInput
    /**
     * Limit how many Melhorias to update.
     */
    limit?: number
  }

  /**
   * Melhoria updateManyAndReturn
   */
  export type MelhoriaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * The data used to update Melhorias.
     */
    data: XOR<MelhoriaUpdateManyMutationInput, MelhoriaUncheckedUpdateManyInput>
    /**
     * Filter which Melhorias to update
     */
    where?: MelhoriaWhereInput
    /**
     * Limit how many Melhorias to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Melhoria upsert
   */
  export type MelhoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Melhoria to update in case it exists.
     */
    where: MelhoriaWhereUniqueInput
    /**
     * In case the Melhoria found by the `where` argument doesn't exist, create a new Melhoria with this data.
     */
    create: XOR<MelhoriaCreateInput, MelhoriaUncheckedCreateInput>
    /**
     * In case the Melhoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MelhoriaUpdateInput, MelhoriaUncheckedUpdateInput>
  }

  /**
   * Melhoria delete
   */
  export type MelhoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
    /**
     * Filter which Melhoria to delete.
     */
    where: MelhoriaWhereUniqueInput
  }

  /**
   * Melhoria deleteMany
   */
  export type MelhoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Melhorias to delete
     */
    where?: MelhoriaWhereInput
    /**
     * Limit how many Melhorias to delete.
     */
    limit?: number
  }

  /**
   * Melhoria.obra
   */
  export type Melhoria$obraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Obra
     */
    select?: ObraSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Obra
     */
    omit?: ObraOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObraInclude<ExtArgs> | null
    where?: ObraWhereInput
  }

  /**
   * Melhoria without action
   */
  export type MelhoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Melhoria
     */
    select?: MelhoriaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Melhoria
     */
    omit?: MelhoriaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MelhoriaInclude<ExtArgs> | null
  }


  /**
   * Model EtapaHistorico
   */

  export type AggregateEtapaHistorico = {
    _count: EtapaHistoricoCountAggregateOutputType | null
    _avg: EtapaHistoricoAvgAggregateOutputType | null
    _sum: EtapaHistoricoSumAggregateOutputType | null
    _min: EtapaHistoricoMinAggregateOutputType | null
    _max: EtapaHistoricoMaxAggregateOutputType | null
  }

  export type EtapaHistoricoAvgAggregateOutputType = {
    id: number | null
    etapaId: number | null
  }

  export type EtapaHistoricoSumAggregateOutputType = {
    id: number | null
    etapaId: number | null
  }

  export type EtapaHistoricoMinAggregateOutputType = {
    id: number | null
    etapaId: number | null
    nome: string | null
    status: string | null
    alteradoEm: Date | null
  }

  export type EtapaHistoricoMaxAggregateOutputType = {
    id: number | null
    etapaId: number | null
    nome: string | null
    status: string | null
    alteradoEm: Date | null
  }

  export type EtapaHistoricoCountAggregateOutputType = {
    id: number
    etapaId: number
    nome: number
    status: number
    alteradoEm: number
    _all: number
  }


  export type EtapaHistoricoAvgAggregateInputType = {
    id?: true
    etapaId?: true
  }

  export type EtapaHistoricoSumAggregateInputType = {
    id?: true
    etapaId?: true
  }

  export type EtapaHistoricoMinAggregateInputType = {
    id?: true
    etapaId?: true
    nome?: true
    status?: true
    alteradoEm?: true
  }

  export type EtapaHistoricoMaxAggregateInputType = {
    id?: true
    etapaId?: true
    nome?: true
    status?: true
    alteradoEm?: true
  }

  export type EtapaHistoricoCountAggregateInputType = {
    id?: true
    etapaId?: true
    nome?: true
    status?: true
    alteradoEm?: true
    _all?: true
  }

  export type EtapaHistoricoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EtapaHistorico to aggregate.
     */
    where?: EtapaHistoricoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EtapaHistoricos to fetch.
     */
    orderBy?: EtapaHistoricoOrderByWithRelationInput | EtapaHistoricoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EtapaHistoricoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EtapaHistoricos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EtapaHistoricos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EtapaHistoricos
    **/
    _count?: true | EtapaHistoricoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EtapaHistoricoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EtapaHistoricoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EtapaHistoricoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EtapaHistoricoMaxAggregateInputType
  }

  export type GetEtapaHistoricoAggregateType<T extends EtapaHistoricoAggregateArgs> = {
        [P in keyof T & keyof AggregateEtapaHistorico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEtapaHistorico[P]>
      : GetScalarType<T[P], AggregateEtapaHistorico[P]>
  }




  export type EtapaHistoricoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EtapaHistoricoWhereInput
    orderBy?: EtapaHistoricoOrderByWithAggregationInput | EtapaHistoricoOrderByWithAggregationInput[]
    by: EtapaHistoricoScalarFieldEnum[] | EtapaHistoricoScalarFieldEnum
    having?: EtapaHistoricoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EtapaHistoricoCountAggregateInputType | true
    _avg?: EtapaHistoricoAvgAggregateInputType
    _sum?: EtapaHistoricoSumAggregateInputType
    _min?: EtapaHistoricoMinAggregateInputType
    _max?: EtapaHistoricoMaxAggregateInputType
  }

  export type EtapaHistoricoGroupByOutputType = {
    id: number
    etapaId: number
    nome: string
    status: string
    alteradoEm: Date
    _count: EtapaHistoricoCountAggregateOutputType | null
    _avg: EtapaHistoricoAvgAggregateOutputType | null
    _sum: EtapaHistoricoSumAggregateOutputType | null
    _min: EtapaHistoricoMinAggregateOutputType | null
    _max: EtapaHistoricoMaxAggregateOutputType | null
  }

  type GetEtapaHistoricoGroupByPayload<T extends EtapaHistoricoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EtapaHistoricoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EtapaHistoricoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EtapaHistoricoGroupByOutputType[P]>
            : GetScalarType<T[P], EtapaHistoricoGroupByOutputType[P]>
        }
      >
    >


  export type EtapaHistoricoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    etapaId?: boolean
    nome?: boolean
    status?: boolean
    alteradoEm?: boolean
  }, ExtArgs["result"]["etapaHistorico"]>

  export type EtapaHistoricoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    etapaId?: boolean
    nome?: boolean
    status?: boolean
    alteradoEm?: boolean
  }, ExtArgs["result"]["etapaHistorico"]>

  export type EtapaHistoricoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    etapaId?: boolean
    nome?: boolean
    status?: boolean
    alteradoEm?: boolean
  }, ExtArgs["result"]["etapaHistorico"]>

  export type EtapaHistoricoSelectScalar = {
    id?: boolean
    etapaId?: boolean
    nome?: boolean
    status?: boolean
    alteradoEm?: boolean
  }

  export type EtapaHistoricoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "etapaId" | "nome" | "status" | "alteradoEm", ExtArgs["result"]["etapaHistorico"]>

  export type $EtapaHistoricoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EtapaHistorico"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      etapaId: number
      nome: string
      status: string
      alteradoEm: Date
    }, ExtArgs["result"]["etapaHistorico"]>
    composites: {}
  }

  type EtapaHistoricoGetPayload<S extends boolean | null | undefined | EtapaHistoricoDefaultArgs> = $Result.GetResult<Prisma.$EtapaHistoricoPayload, S>

  type EtapaHistoricoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EtapaHistoricoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EtapaHistoricoCountAggregateInputType | true
    }

  export interface EtapaHistoricoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EtapaHistorico'], meta: { name: 'EtapaHistorico' } }
    /**
     * Find zero or one EtapaHistorico that matches the filter.
     * @param {EtapaHistoricoFindUniqueArgs} args - Arguments to find a EtapaHistorico
     * @example
     * // Get one EtapaHistorico
     * const etapaHistorico = await prisma.etapaHistorico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EtapaHistoricoFindUniqueArgs>(args: SelectSubset<T, EtapaHistoricoFindUniqueArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EtapaHistorico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EtapaHistoricoFindUniqueOrThrowArgs} args - Arguments to find a EtapaHistorico
     * @example
     * // Get one EtapaHistorico
     * const etapaHistorico = await prisma.etapaHistorico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EtapaHistoricoFindUniqueOrThrowArgs>(args: SelectSubset<T, EtapaHistoricoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EtapaHistorico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaHistoricoFindFirstArgs} args - Arguments to find a EtapaHistorico
     * @example
     * // Get one EtapaHistorico
     * const etapaHistorico = await prisma.etapaHistorico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EtapaHistoricoFindFirstArgs>(args?: SelectSubset<T, EtapaHistoricoFindFirstArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EtapaHistorico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaHistoricoFindFirstOrThrowArgs} args - Arguments to find a EtapaHistorico
     * @example
     * // Get one EtapaHistorico
     * const etapaHistorico = await prisma.etapaHistorico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EtapaHistoricoFindFirstOrThrowArgs>(args?: SelectSubset<T, EtapaHistoricoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EtapaHistoricos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaHistoricoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EtapaHistoricos
     * const etapaHistoricos = await prisma.etapaHistorico.findMany()
     * 
     * // Get first 10 EtapaHistoricos
     * const etapaHistoricos = await prisma.etapaHistorico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const etapaHistoricoWithIdOnly = await prisma.etapaHistorico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EtapaHistoricoFindManyArgs>(args?: SelectSubset<T, EtapaHistoricoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EtapaHistorico.
     * @param {EtapaHistoricoCreateArgs} args - Arguments to create a EtapaHistorico.
     * @example
     * // Create one EtapaHistorico
     * const EtapaHistorico = await prisma.etapaHistorico.create({
     *   data: {
     *     // ... data to create a EtapaHistorico
     *   }
     * })
     * 
     */
    create<T extends EtapaHistoricoCreateArgs>(args: SelectSubset<T, EtapaHistoricoCreateArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EtapaHistoricos.
     * @param {EtapaHistoricoCreateManyArgs} args - Arguments to create many EtapaHistoricos.
     * @example
     * // Create many EtapaHistoricos
     * const etapaHistorico = await prisma.etapaHistorico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EtapaHistoricoCreateManyArgs>(args?: SelectSubset<T, EtapaHistoricoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EtapaHistoricos and returns the data saved in the database.
     * @param {EtapaHistoricoCreateManyAndReturnArgs} args - Arguments to create many EtapaHistoricos.
     * @example
     * // Create many EtapaHistoricos
     * const etapaHistorico = await prisma.etapaHistorico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EtapaHistoricos and only return the `id`
     * const etapaHistoricoWithIdOnly = await prisma.etapaHistorico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EtapaHistoricoCreateManyAndReturnArgs>(args?: SelectSubset<T, EtapaHistoricoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EtapaHistorico.
     * @param {EtapaHistoricoDeleteArgs} args - Arguments to delete one EtapaHistorico.
     * @example
     * // Delete one EtapaHistorico
     * const EtapaHistorico = await prisma.etapaHistorico.delete({
     *   where: {
     *     // ... filter to delete one EtapaHistorico
     *   }
     * })
     * 
     */
    delete<T extends EtapaHistoricoDeleteArgs>(args: SelectSubset<T, EtapaHistoricoDeleteArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EtapaHistorico.
     * @param {EtapaHistoricoUpdateArgs} args - Arguments to update one EtapaHistorico.
     * @example
     * // Update one EtapaHistorico
     * const etapaHistorico = await prisma.etapaHistorico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EtapaHistoricoUpdateArgs>(args: SelectSubset<T, EtapaHistoricoUpdateArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EtapaHistoricos.
     * @param {EtapaHistoricoDeleteManyArgs} args - Arguments to filter EtapaHistoricos to delete.
     * @example
     * // Delete a few EtapaHistoricos
     * const { count } = await prisma.etapaHistorico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EtapaHistoricoDeleteManyArgs>(args?: SelectSubset<T, EtapaHistoricoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EtapaHistoricos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaHistoricoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EtapaHistoricos
     * const etapaHistorico = await prisma.etapaHistorico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EtapaHistoricoUpdateManyArgs>(args: SelectSubset<T, EtapaHistoricoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EtapaHistoricos and returns the data updated in the database.
     * @param {EtapaHistoricoUpdateManyAndReturnArgs} args - Arguments to update many EtapaHistoricos.
     * @example
     * // Update many EtapaHistoricos
     * const etapaHistorico = await prisma.etapaHistorico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EtapaHistoricos and only return the `id`
     * const etapaHistoricoWithIdOnly = await prisma.etapaHistorico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EtapaHistoricoUpdateManyAndReturnArgs>(args: SelectSubset<T, EtapaHistoricoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EtapaHistorico.
     * @param {EtapaHistoricoUpsertArgs} args - Arguments to update or create a EtapaHistorico.
     * @example
     * // Update or create a EtapaHistorico
     * const etapaHistorico = await prisma.etapaHistorico.upsert({
     *   create: {
     *     // ... data to create a EtapaHistorico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EtapaHistorico we want to update
     *   }
     * })
     */
    upsert<T extends EtapaHistoricoUpsertArgs>(args: SelectSubset<T, EtapaHistoricoUpsertArgs<ExtArgs>>): Prisma__EtapaHistoricoClient<$Result.GetResult<Prisma.$EtapaHistoricoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EtapaHistoricos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaHistoricoCountArgs} args - Arguments to filter EtapaHistoricos to count.
     * @example
     * // Count the number of EtapaHistoricos
     * const count = await prisma.etapaHistorico.count({
     *   where: {
     *     // ... the filter for the EtapaHistoricos we want to count
     *   }
     * })
    **/
    count<T extends EtapaHistoricoCountArgs>(
      args?: Subset<T, EtapaHistoricoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EtapaHistoricoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EtapaHistorico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaHistoricoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EtapaHistoricoAggregateArgs>(args: Subset<T, EtapaHistoricoAggregateArgs>): Prisma.PrismaPromise<GetEtapaHistoricoAggregateType<T>>

    /**
     * Group by EtapaHistorico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EtapaHistoricoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EtapaHistoricoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EtapaHistoricoGroupByArgs['orderBy'] }
        : { orderBy?: EtapaHistoricoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EtapaHistoricoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEtapaHistoricoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EtapaHistorico model
   */
  readonly fields: EtapaHistoricoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EtapaHistorico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EtapaHistoricoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EtapaHistorico model
   */
  interface EtapaHistoricoFieldRefs {
    readonly id: FieldRef<"EtapaHistorico", 'Int'>
    readonly etapaId: FieldRef<"EtapaHistorico", 'Int'>
    readonly nome: FieldRef<"EtapaHistorico", 'String'>
    readonly status: FieldRef<"EtapaHistorico", 'String'>
    readonly alteradoEm: FieldRef<"EtapaHistorico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EtapaHistorico findUnique
   */
  export type EtapaHistoricoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * Filter, which EtapaHistorico to fetch.
     */
    where: EtapaHistoricoWhereUniqueInput
  }

  /**
   * EtapaHistorico findUniqueOrThrow
   */
  export type EtapaHistoricoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * Filter, which EtapaHistorico to fetch.
     */
    where: EtapaHistoricoWhereUniqueInput
  }

  /**
   * EtapaHistorico findFirst
   */
  export type EtapaHistoricoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * Filter, which EtapaHistorico to fetch.
     */
    where?: EtapaHistoricoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EtapaHistoricos to fetch.
     */
    orderBy?: EtapaHistoricoOrderByWithRelationInput | EtapaHistoricoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EtapaHistoricos.
     */
    cursor?: EtapaHistoricoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EtapaHistoricos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EtapaHistoricos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EtapaHistoricos.
     */
    distinct?: EtapaHistoricoScalarFieldEnum | EtapaHistoricoScalarFieldEnum[]
  }

  /**
   * EtapaHistorico findFirstOrThrow
   */
  export type EtapaHistoricoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * Filter, which EtapaHistorico to fetch.
     */
    where?: EtapaHistoricoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EtapaHistoricos to fetch.
     */
    orderBy?: EtapaHistoricoOrderByWithRelationInput | EtapaHistoricoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EtapaHistoricos.
     */
    cursor?: EtapaHistoricoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EtapaHistoricos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EtapaHistoricos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EtapaHistoricos.
     */
    distinct?: EtapaHistoricoScalarFieldEnum | EtapaHistoricoScalarFieldEnum[]
  }

  /**
   * EtapaHistorico findMany
   */
  export type EtapaHistoricoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * Filter, which EtapaHistoricos to fetch.
     */
    where?: EtapaHistoricoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EtapaHistoricos to fetch.
     */
    orderBy?: EtapaHistoricoOrderByWithRelationInput | EtapaHistoricoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EtapaHistoricos.
     */
    cursor?: EtapaHistoricoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EtapaHistoricos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EtapaHistoricos.
     */
    skip?: number
    distinct?: EtapaHistoricoScalarFieldEnum | EtapaHistoricoScalarFieldEnum[]
  }

  /**
   * EtapaHistorico create
   */
  export type EtapaHistoricoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * The data needed to create a EtapaHistorico.
     */
    data: XOR<EtapaHistoricoCreateInput, EtapaHistoricoUncheckedCreateInput>
  }

  /**
   * EtapaHistorico createMany
   */
  export type EtapaHistoricoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EtapaHistoricos.
     */
    data: EtapaHistoricoCreateManyInput | EtapaHistoricoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EtapaHistorico createManyAndReturn
   */
  export type EtapaHistoricoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * The data used to create many EtapaHistoricos.
     */
    data: EtapaHistoricoCreateManyInput | EtapaHistoricoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EtapaHistorico update
   */
  export type EtapaHistoricoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * The data needed to update a EtapaHistorico.
     */
    data: XOR<EtapaHistoricoUpdateInput, EtapaHistoricoUncheckedUpdateInput>
    /**
     * Choose, which EtapaHistorico to update.
     */
    where: EtapaHistoricoWhereUniqueInput
  }

  /**
   * EtapaHistorico updateMany
   */
  export type EtapaHistoricoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EtapaHistoricos.
     */
    data: XOR<EtapaHistoricoUpdateManyMutationInput, EtapaHistoricoUncheckedUpdateManyInput>
    /**
     * Filter which EtapaHistoricos to update
     */
    where?: EtapaHistoricoWhereInput
    /**
     * Limit how many EtapaHistoricos to update.
     */
    limit?: number
  }

  /**
   * EtapaHistorico updateManyAndReturn
   */
  export type EtapaHistoricoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * The data used to update EtapaHistoricos.
     */
    data: XOR<EtapaHistoricoUpdateManyMutationInput, EtapaHistoricoUncheckedUpdateManyInput>
    /**
     * Filter which EtapaHistoricos to update
     */
    where?: EtapaHistoricoWhereInput
    /**
     * Limit how many EtapaHistoricos to update.
     */
    limit?: number
  }

  /**
   * EtapaHistorico upsert
   */
  export type EtapaHistoricoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * The filter to search for the EtapaHistorico to update in case it exists.
     */
    where: EtapaHistoricoWhereUniqueInput
    /**
     * In case the EtapaHistorico found by the `where` argument doesn't exist, create a new EtapaHistorico with this data.
     */
    create: XOR<EtapaHistoricoCreateInput, EtapaHistoricoUncheckedCreateInput>
    /**
     * In case the EtapaHistorico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EtapaHistoricoUpdateInput, EtapaHistoricoUncheckedUpdateInput>
  }

  /**
   * EtapaHistorico delete
   */
  export type EtapaHistoricoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
    /**
     * Filter which EtapaHistorico to delete.
     */
    where: EtapaHistoricoWhereUniqueInput
  }

  /**
   * EtapaHistorico deleteMany
   */
  export type EtapaHistoricoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EtapaHistoricos to delete
     */
    where?: EtapaHistoricoWhereInput
    /**
     * Limit how many EtapaHistoricos to delete.
     */
    limit?: number
  }

  /**
   * EtapaHistorico without action
   */
  export type EtapaHistoricoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EtapaHistorico
     */
    select?: EtapaHistoricoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EtapaHistorico
     */
    omit?: EtapaHistoricoOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    criadoEm: 'criadoEm'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const ObraScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    localizacao: 'localizacao',
    empresa: 'empresa',
    cronograma: 'cronograma',
    orcamento: 'orcamento',
    status: 'status',
    criadoEm: 'criadoEm',
    servidorId: 'servidorId'
  };

  export type ObraScalarFieldEnum = (typeof ObraScalarFieldEnum)[keyof typeof ObraScalarFieldEnum]


  export const DocumentoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    url: 'url',
    obraId: 'obraId'
  };

  export type DocumentoScalarFieldEnum = (typeof DocumentoScalarFieldEnum)[keyof typeof DocumentoScalarFieldEnum]


  export const EtapaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    status: 'status',
    obraId: 'obraId'
  };

  export type EtapaScalarFieldEnum = (typeof EtapaScalarFieldEnum)[keyof typeof EtapaScalarFieldEnum]


  export const MelhoriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    mensagem: 'mensagem',
    tipo: 'tipo',
    obraId: 'obraId',
    criadoEm: 'criadoEm'
  };

  export type MelhoriaScalarFieldEnum = (typeof MelhoriaScalarFieldEnum)[keyof typeof MelhoriaScalarFieldEnum]


  export const EtapaHistoricoScalarFieldEnum: {
    id: 'id',
    etapaId: 'etapaId',
    nome: 'nome',
    status: 'status',
    alteradoEm: 'alteradoEm'
  };

  export type EtapaHistoricoScalarFieldEnum = (typeof EtapaHistoricoScalarFieldEnum)[keyof typeof EtapaHistoricoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    criadoEm?: DateTimeFilter<"Usuario"> | Date | string
    obras?: ObraListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criadoEm?: SortOrder
    obras?: ObraOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    criadoEm?: DateTimeFilter<"Usuario"> | Date | string
    obras?: ObraListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criadoEm?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type ObraWhereInput = {
    AND?: ObraWhereInput | ObraWhereInput[]
    OR?: ObraWhereInput[]
    NOT?: ObraWhereInput | ObraWhereInput[]
    id?: IntFilter<"Obra"> | number
    nome?: StringFilter<"Obra"> | string
    localizacao?: StringFilter<"Obra"> | string
    empresa?: StringFilter<"Obra"> | string
    cronograma?: StringFilter<"Obra"> | string
    orcamento?: FloatFilter<"Obra"> | number
    status?: StringFilter<"Obra"> | string
    criadoEm?: DateTimeFilter<"Obra"> | Date | string
    servidorId?: IntFilter<"Obra"> | number
    servidor?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    documentos?: DocumentoListRelationFilter
    etapas?: EtapaListRelationFilter
    melhorias?: MelhoriaListRelationFilter
  }

  export type ObraOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    localizacao?: SortOrder
    empresa?: SortOrder
    cronograma?: SortOrder
    orcamento?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    servidorId?: SortOrder
    servidor?: UsuarioOrderByWithRelationInput
    documentos?: DocumentoOrderByRelationAggregateInput
    etapas?: EtapaOrderByRelationAggregateInput
    melhorias?: MelhoriaOrderByRelationAggregateInput
  }

  export type ObraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ObraWhereInput | ObraWhereInput[]
    OR?: ObraWhereInput[]
    NOT?: ObraWhereInput | ObraWhereInput[]
    nome?: StringFilter<"Obra"> | string
    localizacao?: StringFilter<"Obra"> | string
    empresa?: StringFilter<"Obra"> | string
    cronograma?: StringFilter<"Obra"> | string
    orcamento?: FloatFilter<"Obra"> | number
    status?: StringFilter<"Obra"> | string
    criadoEm?: DateTimeFilter<"Obra"> | Date | string
    servidorId?: IntFilter<"Obra"> | number
    servidor?: XOR<UsuarioScalarRelationFilter, UsuarioWhereInput>
    documentos?: DocumentoListRelationFilter
    etapas?: EtapaListRelationFilter
    melhorias?: MelhoriaListRelationFilter
  }, "id">

  export type ObraOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    localizacao?: SortOrder
    empresa?: SortOrder
    cronograma?: SortOrder
    orcamento?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    servidorId?: SortOrder
    _count?: ObraCountOrderByAggregateInput
    _avg?: ObraAvgOrderByAggregateInput
    _max?: ObraMaxOrderByAggregateInput
    _min?: ObraMinOrderByAggregateInput
    _sum?: ObraSumOrderByAggregateInput
  }

  export type ObraScalarWhereWithAggregatesInput = {
    AND?: ObraScalarWhereWithAggregatesInput | ObraScalarWhereWithAggregatesInput[]
    OR?: ObraScalarWhereWithAggregatesInput[]
    NOT?: ObraScalarWhereWithAggregatesInput | ObraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Obra"> | number
    nome?: StringWithAggregatesFilter<"Obra"> | string
    localizacao?: StringWithAggregatesFilter<"Obra"> | string
    empresa?: StringWithAggregatesFilter<"Obra"> | string
    cronograma?: StringWithAggregatesFilter<"Obra"> | string
    orcamento?: FloatWithAggregatesFilter<"Obra"> | number
    status?: StringWithAggregatesFilter<"Obra"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Obra"> | Date | string
    servidorId?: IntWithAggregatesFilter<"Obra"> | number
  }

  export type DocumentoWhereInput = {
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    id?: IntFilter<"Documento"> | number
    nome?: StringFilter<"Documento"> | string
    url?: StringFilter<"Documento"> | string
    obraId?: IntFilter<"Documento"> | number
    obra?: XOR<ObraScalarRelationFilter, ObraWhereInput>
  }

  export type DocumentoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    obraId?: SortOrder
    obra?: ObraOrderByWithRelationInput
  }

  export type DocumentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DocumentoWhereInput | DocumentoWhereInput[]
    OR?: DocumentoWhereInput[]
    NOT?: DocumentoWhereInput | DocumentoWhereInput[]
    nome?: StringFilter<"Documento"> | string
    url?: StringFilter<"Documento"> | string
    obraId?: IntFilter<"Documento"> | number
    obra?: XOR<ObraScalarRelationFilter, ObraWhereInput>
  }, "id">

  export type DocumentoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    obraId?: SortOrder
    _count?: DocumentoCountOrderByAggregateInput
    _avg?: DocumentoAvgOrderByAggregateInput
    _max?: DocumentoMaxOrderByAggregateInput
    _min?: DocumentoMinOrderByAggregateInput
    _sum?: DocumentoSumOrderByAggregateInput
  }

  export type DocumentoScalarWhereWithAggregatesInput = {
    AND?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    OR?: DocumentoScalarWhereWithAggregatesInput[]
    NOT?: DocumentoScalarWhereWithAggregatesInput | DocumentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Documento"> | number
    nome?: StringWithAggregatesFilter<"Documento"> | string
    url?: StringWithAggregatesFilter<"Documento"> | string
    obraId?: IntWithAggregatesFilter<"Documento"> | number
  }

  export type EtapaWhereInput = {
    AND?: EtapaWhereInput | EtapaWhereInput[]
    OR?: EtapaWhereInput[]
    NOT?: EtapaWhereInput | EtapaWhereInput[]
    id?: IntFilter<"Etapa"> | number
    nome?: StringFilter<"Etapa"> | string
    status?: StringFilter<"Etapa"> | string
    obraId?: IntFilter<"Etapa"> | number
    obra?: XOR<ObraScalarRelationFilter, ObraWhereInput>
  }

  export type EtapaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    obraId?: SortOrder
    obra?: ObraOrderByWithRelationInput
  }

  export type EtapaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EtapaWhereInput | EtapaWhereInput[]
    OR?: EtapaWhereInput[]
    NOT?: EtapaWhereInput | EtapaWhereInput[]
    nome?: StringFilter<"Etapa"> | string
    status?: StringFilter<"Etapa"> | string
    obraId?: IntFilter<"Etapa"> | number
    obra?: XOR<ObraScalarRelationFilter, ObraWhereInput>
  }, "id">

  export type EtapaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    obraId?: SortOrder
    _count?: EtapaCountOrderByAggregateInput
    _avg?: EtapaAvgOrderByAggregateInput
    _max?: EtapaMaxOrderByAggregateInput
    _min?: EtapaMinOrderByAggregateInput
    _sum?: EtapaSumOrderByAggregateInput
  }

  export type EtapaScalarWhereWithAggregatesInput = {
    AND?: EtapaScalarWhereWithAggregatesInput | EtapaScalarWhereWithAggregatesInput[]
    OR?: EtapaScalarWhereWithAggregatesInput[]
    NOT?: EtapaScalarWhereWithAggregatesInput | EtapaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Etapa"> | number
    nome?: StringWithAggregatesFilter<"Etapa"> | string
    status?: StringWithAggregatesFilter<"Etapa"> | string
    obraId?: IntWithAggregatesFilter<"Etapa"> | number
  }

  export type MelhoriaWhereInput = {
    AND?: MelhoriaWhereInput | MelhoriaWhereInput[]
    OR?: MelhoriaWhereInput[]
    NOT?: MelhoriaWhereInput | MelhoriaWhereInput[]
    id?: IntFilter<"Melhoria"> | number
    nome?: StringNullableFilter<"Melhoria"> | string | null
    email?: StringNullableFilter<"Melhoria"> | string | null
    mensagem?: StringFilter<"Melhoria"> | string
    tipo?: StringFilter<"Melhoria"> | string
    obraId?: IntNullableFilter<"Melhoria"> | number | null
    criadoEm?: DateTimeFilter<"Melhoria"> | Date | string
    obra?: XOR<ObraNullableScalarRelationFilter, ObraWhereInput> | null
  }

  export type MelhoriaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    mensagem?: SortOrder
    tipo?: SortOrder
    obraId?: SortOrderInput | SortOrder
    criadoEm?: SortOrder
    obra?: ObraOrderByWithRelationInput
  }

  export type MelhoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MelhoriaWhereInput | MelhoriaWhereInput[]
    OR?: MelhoriaWhereInput[]
    NOT?: MelhoriaWhereInput | MelhoriaWhereInput[]
    nome?: StringNullableFilter<"Melhoria"> | string | null
    email?: StringNullableFilter<"Melhoria"> | string | null
    mensagem?: StringFilter<"Melhoria"> | string
    tipo?: StringFilter<"Melhoria"> | string
    obraId?: IntNullableFilter<"Melhoria"> | number | null
    criadoEm?: DateTimeFilter<"Melhoria"> | Date | string
    obra?: XOR<ObraNullableScalarRelationFilter, ObraWhereInput> | null
  }, "id">

  export type MelhoriaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    mensagem?: SortOrder
    tipo?: SortOrder
    obraId?: SortOrderInput | SortOrder
    criadoEm?: SortOrder
    _count?: MelhoriaCountOrderByAggregateInput
    _avg?: MelhoriaAvgOrderByAggregateInput
    _max?: MelhoriaMaxOrderByAggregateInput
    _min?: MelhoriaMinOrderByAggregateInput
    _sum?: MelhoriaSumOrderByAggregateInput
  }

  export type MelhoriaScalarWhereWithAggregatesInput = {
    AND?: MelhoriaScalarWhereWithAggregatesInput | MelhoriaScalarWhereWithAggregatesInput[]
    OR?: MelhoriaScalarWhereWithAggregatesInput[]
    NOT?: MelhoriaScalarWhereWithAggregatesInput | MelhoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Melhoria"> | number
    nome?: StringNullableWithAggregatesFilter<"Melhoria"> | string | null
    email?: StringNullableWithAggregatesFilter<"Melhoria"> | string | null
    mensagem?: StringWithAggregatesFilter<"Melhoria"> | string
    tipo?: StringWithAggregatesFilter<"Melhoria"> | string
    obraId?: IntNullableWithAggregatesFilter<"Melhoria"> | number | null
    criadoEm?: DateTimeWithAggregatesFilter<"Melhoria"> | Date | string
  }

  export type EtapaHistoricoWhereInput = {
    AND?: EtapaHistoricoWhereInput | EtapaHistoricoWhereInput[]
    OR?: EtapaHistoricoWhereInput[]
    NOT?: EtapaHistoricoWhereInput | EtapaHistoricoWhereInput[]
    id?: IntFilter<"EtapaHistorico"> | number
    etapaId?: IntFilter<"EtapaHistorico"> | number
    nome?: StringFilter<"EtapaHistorico"> | string
    status?: StringFilter<"EtapaHistorico"> | string
    alteradoEm?: DateTimeFilter<"EtapaHistorico"> | Date | string
  }

  export type EtapaHistoricoOrderByWithRelationInput = {
    id?: SortOrder
    etapaId?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    alteradoEm?: SortOrder
  }

  export type EtapaHistoricoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EtapaHistoricoWhereInput | EtapaHistoricoWhereInput[]
    OR?: EtapaHistoricoWhereInput[]
    NOT?: EtapaHistoricoWhereInput | EtapaHistoricoWhereInput[]
    etapaId?: IntFilter<"EtapaHistorico"> | number
    nome?: StringFilter<"EtapaHistorico"> | string
    status?: StringFilter<"EtapaHistorico"> | string
    alteradoEm?: DateTimeFilter<"EtapaHistorico"> | Date | string
  }, "id">

  export type EtapaHistoricoOrderByWithAggregationInput = {
    id?: SortOrder
    etapaId?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    alteradoEm?: SortOrder
    _count?: EtapaHistoricoCountOrderByAggregateInput
    _avg?: EtapaHistoricoAvgOrderByAggregateInput
    _max?: EtapaHistoricoMaxOrderByAggregateInput
    _min?: EtapaHistoricoMinOrderByAggregateInput
    _sum?: EtapaHistoricoSumOrderByAggregateInput
  }

  export type EtapaHistoricoScalarWhereWithAggregatesInput = {
    AND?: EtapaHistoricoScalarWhereWithAggregatesInput | EtapaHistoricoScalarWhereWithAggregatesInput[]
    OR?: EtapaHistoricoScalarWhereWithAggregatesInput[]
    NOT?: EtapaHistoricoScalarWhereWithAggregatesInput | EtapaHistoricoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EtapaHistorico"> | number
    etapaId?: IntWithAggregatesFilter<"EtapaHistorico"> | number
    nome?: StringWithAggregatesFilter<"EtapaHistorico"> | string
    status?: StringWithAggregatesFilter<"EtapaHistorico"> | string
    alteradoEm?: DateTimeWithAggregatesFilter<"EtapaHistorico"> | Date | string
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    senha: string
    criadoEm?: Date | string
    obras?: ObraCreateNestedManyWithoutServidorInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criadoEm?: Date | string
    obras?: ObraUncheckedCreateNestedManyWithoutServidorInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    obras?: ObraUpdateManyWithoutServidorNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    obras?: ObraUncheckedUpdateManyWithoutServidorNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criadoEm?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ObraCreateInput = {
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidor: UsuarioCreateNestedOneWithoutObrasInput
    documentos?: DocumentoCreateNestedManyWithoutObraInput
    etapas?: EtapaCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaCreateNestedManyWithoutObraInput
  }

  export type ObraUncheckedCreateInput = {
    id?: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidorId: number
    documentos?: DocumentoUncheckedCreateNestedManyWithoutObraInput
    etapas?: EtapaUncheckedCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaUncheckedCreateNestedManyWithoutObraInput
  }

  export type ObraUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidor?: UsuarioUpdateOneRequiredWithoutObrasNestedInput
    documentos?: DocumentoUpdateManyWithoutObraNestedInput
    etapas?: EtapaUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUpdateManyWithoutObraNestedInput
  }

  export type ObraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidorId?: IntFieldUpdateOperationsInput | number
    documentos?: DocumentoUncheckedUpdateManyWithoutObraNestedInput
    etapas?: EtapaUncheckedUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUncheckedUpdateManyWithoutObraNestedInput
  }

  export type ObraCreateManyInput = {
    id?: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidorId: number
  }

  export type ObraUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ObraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidorId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentoCreateInput = {
    nome: string
    url: string
    obra: ObraCreateNestedOneWithoutDocumentosInput
  }

  export type DocumentoUncheckedCreateInput = {
    id?: number
    nome: string
    url: string
    obraId: number
  }

  export type DocumentoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    obra?: ObraUpdateOneRequiredWithoutDocumentosNestedInput
  }

  export type DocumentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    obraId?: IntFieldUpdateOperationsInput | number
  }

  export type DocumentoCreateManyInput = {
    id?: number
    nome: string
    url: string
    obraId: number
  }

  export type DocumentoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    obraId?: IntFieldUpdateOperationsInput | number
  }

  export type EtapaCreateInput = {
    nome: string
    status: string
    obra: ObraCreateNestedOneWithoutEtapasInput
  }

  export type EtapaUncheckedCreateInput = {
    id?: number
    nome: string
    status: string
    obraId: number
  }

  export type EtapaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    obra?: ObraUpdateOneRequiredWithoutEtapasNestedInput
  }

  export type EtapaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    obraId?: IntFieldUpdateOperationsInput | number
  }

  export type EtapaCreateManyInput = {
    id?: number
    nome: string
    status: string
    obraId: number
  }

  export type EtapaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EtapaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    obraId?: IntFieldUpdateOperationsInput | number
  }

  export type MelhoriaCreateInput = {
    nome?: string | null
    email?: string | null
    mensagem: string
    tipo: string
    criadoEm?: Date | string
    obra?: ObraCreateNestedOneWithoutMelhoriasInput
  }

  export type MelhoriaUncheckedCreateInput = {
    id?: number
    nome?: string | null
    email?: string | null
    mensagem: string
    tipo: string
    obraId?: number | null
    criadoEm?: Date | string
  }

  export type MelhoriaUpdateInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mensagem?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    obra?: ObraUpdateOneWithoutMelhoriasNestedInput
  }

  export type MelhoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mensagem?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    obraId?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MelhoriaCreateManyInput = {
    id?: number
    nome?: string | null
    email?: string | null
    mensagem: string
    tipo: string
    obraId?: number | null
    criadoEm?: Date | string
  }

  export type MelhoriaUpdateManyMutationInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mensagem?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MelhoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mensagem?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    obraId?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EtapaHistoricoCreateInput = {
    etapaId: number
    nome: string
    status: string
    alteradoEm?: Date | string
  }

  export type EtapaHistoricoUncheckedCreateInput = {
    id?: number
    etapaId: number
    nome: string
    status: string
    alteradoEm?: Date | string
  }

  export type EtapaHistoricoUpdateInput = {
    etapaId?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    alteradoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EtapaHistoricoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    etapaId?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    alteradoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EtapaHistoricoCreateManyInput = {
    id?: number
    etapaId: number
    nome: string
    status: string
    alteradoEm?: Date | string
  }

  export type EtapaHistoricoUpdateManyMutationInput = {
    etapaId?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    alteradoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EtapaHistoricoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    etapaId?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    alteradoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ObraListRelationFilter = {
    every?: ObraWhereInput
    some?: ObraWhereInput
    none?: ObraWhereInput
  }

  export type ObraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    criadoEm?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UsuarioScalarRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type DocumentoListRelationFilter = {
    every?: DocumentoWhereInput
    some?: DocumentoWhereInput
    none?: DocumentoWhereInput
  }

  export type EtapaListRelationFilter = {
    every?: EtapaWhereInput
    some?: EtapaWhereInput
    none?: EtapaWhereInput
  }

  export type MelhoriaListRelationFilter = {
    every?: MelhoriaWhereInput
    some?: MelhoriaWhereInput
    none?: MelhoriaWhereInput
  }

  export type DocumentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EtapaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MelhoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ObraCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    localizacao?: SortOrder
    empresa?: SortOrder
    cronograma?: SortOrder
    orcamento?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    servidorId?: SortOrder
  }

  export type ObraAvgOrderByAggregateInput = {
    id?: SortOrder
    orcamento?: SortOrder
    servidorId?: SortOrder
  }

  export type ObraMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    localizacao?: SortOrder
    empresa?: SortOrder
    cronograma?: SortOrder
    orcamento?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    servidorId?: SortOrder
  }

  export type ObraMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    localizacao?: SortOrder
    empresa?: SortOrder
    cronograma?: SortOrder
    orcamento?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    servidorId?: SortOrder
  }

  export type ObraSumOrderByAggregateInput = {
    id?: SortOrder
    orcamento?: SortOrder
    servidorId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ObraScalarRelationFilter = {
    is?: ObraWhereInput
    isNot?: ObraWhereInput
  }

  export type DocumentoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    obraId?: SortOrder
  }

  export type DocumentoAvgOrderByAggregateInput = {
    id?: SortOrder
    obraId?: SortOrder
  }

  export type DocumentoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    obraId?: SortOrder
  }

  export type DocumentoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    url?: SortOrder
    obraId?: SortOrder
  }

  export type DocumentoSumOrderByAggregateInput = {
    id?: SortOrder
    obraId?: SortOrder
  }

  export type EtapaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    obraId?: SortOrder
  }

  export type EtapaAvgOrderByAggregateInput = {
    id?: SortOrder
    obraId?: SortOrder
  }

  export type EtapaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    obraId?: SortOrder
  }

  export type EtapaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    obraId?: SortOrder
  }

  export type EtapaSumOrderByAggregateInput = {
    id?: SortOrder
    obraId?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ObraNullableScalarRelationFilter = {
    is?: ObraWhereInput | null
    isNot?: ObraWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MelhoriaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    mensagem?: SortOrder
    tipo?: SortOrder
    obraId?: SortOrder
    criadoEm?: SortOrder
  }

  export type MelhoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    obraId?: SortOrder
  }

  export type MelhoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    mensagem?: SortOrder
    tipo?: SortOrder
    obraId?: SortOrder
    criadoEm?: SortOrder
  }

  export type MelhoriaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    mensagem?: SortOrder
    tipo?: SortOrder
    obraId?: SortOrder
    criadoEm?: SortOrder
  }

  export type MelhoriaSumOrderByAggregateInput = {
    id?: SortOrder
    obraId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EtapaHistoricoCountOrderByAggregateInput = {
    id?: SortOrder
    etapaId?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    alteradoEm?: SortOrder
  }

  export type EtapaHistoricoAvgOrderByAggregateInput = {
    id?: SortOrder
    etapaId?: SortOrder
  }

  export type EtapaHistoricoMaxOrderByAggregateInput = {
    id?: SortOrder
    etapaId?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    alteradoEm?: SortOrder
  }

  export type EtapaHistoricoMinOrderByAggregateInput = {
    id?: SortOrder
    etapaId?: SortOrder
    nome?: SortOrder
    status?: SortOrder
    alteradoEm?: SortOrder
  }

  export type EtapaHistoricoSumOrderByAggregateInput = {
    id?: SortOrder
    etapaId?: SortOrder
  }

  export type ObraCreateNestedManyWithoutServidorInput = {
    create?: XOR<ObraCreateWithoutServidorInput, ObraUncheckedCreateWithoutServidorInput> | ObraCreateWithoutServidorInput[] | ObraUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: ObraCreateOrConnectWithoutServidorInput | ObraCreateOrConnectWithoutServidorInput[]
    createMany?: ObraCreateManyServidorInputEnvelope
    connect?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
  }

  export type ObraUncheckedCreateNestedManyWithoutServidorInput = {
    create?: XOR<ObraCreateWithoutServidorInput, ObraUncheckedCreateWithoutServidorInput> | ObraCreateWithoutServidorInput[] | ObraUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: ObraCreateOrConnectWithoutServidorInput | ObraCreateOrConnectWithoutServidorInput[]
    createMany?: ObraCreateManyServidorInputEnvelope
    connect?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ObraUpdateManyWithoutServidorNestedInput = {
    create?: XOR<ObraCreateWithoutServidorInput, ObraUncheckedCreateWithoutServidorInput> | ObraCreateWithoutServidorInput[] | ObraUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: ObraCreateOrConnectWithoutServidorInput | ObraCreateOrConnectWithoutServidorInput[]
    upsert?: ObraUpsertWithWhereUniqueWithoutServidorInput | ObraUpsertWithWhereUniqueWithoutServidorInput[]
    createMany?: ObraCreateManyServidorInputEnvelope
    set?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    disconnect?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    delete?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    connect?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    update?: ObraUpdateWithWhereUniqueWithoutServidorInput | ObraUpdateWithWhereUniqueWithoutServidorInput[]
    updateMany?: ObraUpdateManyWithWhereWithoutServidorInput | ObraUpdateManyWithWhereWithoutServidorInput[]
    deleteMany?: ObraScalarWhereInput | ObraScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ObraUncheckedUpdateManyWithoutServidorNestedInput = {
    create?: XOR<ObraCreateWithoutServidorInput, ObraUncheckedCreateWithoutServidorInput> | ObraCreateWithoutServidorInput[] | ObraUncheckedCreateWithoutServidorInput[]
    connectOrCreate?: ObraCreateOrConnectWithoutServidorInput | ObraCreateOrConnectWithoutServidorInput[]
    upsert?: ObraUpsertWithWhereUniqueWithoutServidorInput | ObraUpsertWithWhereUniqueWithoutServidorInput[]
    createMany?: ObraCreateManyServidorInputEnvelope
    set?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    disconnect?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    delete?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    connect?: ObraWhereUniqueInput | ObraWhereUniqueInput[]
    update?: ObraUpdateWithWhereUniqueWithoutServidorInput | ObraUpdateWithWhereUniqueWithoutServidorInput[]
    updateMany?: ObraUpdateManyWithWhereWithoutServidorInput | ObraUpdateManyWithWhereWithoutServidorInput[]
    deleteMany?: ObraScalarWhereInput | ObraScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutObrasInput = {
    create?: XOR<UsuarioCreateWithoutObrasInput, UsuarioUncheckedCreateWithoutObrasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutObrasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DocumentoCreateNestedManyWithoutObraInput = {
    create?: XOR<DocumentoCreateWithoutObraInput, DocumentoUncheckedCreateWithoutObraInput> | DocumentoCreateWithoutObraInput[] | DocumentoUncheckedCreateWithoutObraInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutObraInput | DocumentoCreateOrConnectWithoutObraInput[]
    createMany?: DocumentoCreateManyObraInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type EtapaCreateNestedManyWithoutObraInput = {
    create?: XOR<EtapaCreateWithoutObraInput, EtapaUncheckedCreateWithoutObraInput> | EtapaCreateWithoutObraInput[] | EtapaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: EtapaCreateOrConnectWithoutObraInput | EtapaCreateOrConnectWithoutObraInput[]
    createMany?: EtapaCreateManyObraInputEnvelope
    connect?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
  }

  export type MelhoriaCreateNestedManyWithoutObraInput = {
    create?: XOR<MelhoriaCreateWithoutObraInput, MelhoriaUncheckedCreateWithoutObraInput> | MelhoriaCreateWithoutObraInput[] | MelhoriaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: MelhoriaCreateOrConnectWithoutObraInput | MelhoriaCreateOrConnectWithoutObraInput[]
    createMany?: MelhoriaCreateManyObraInputEnvelope
    connect?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
  }

  export type DocumentoUncheckedCreateNestedManyWithoutObraInput = {
    create?: XOR<DocumentoCreateWithoutObraInput, DocumentoUncheckedCreateWithoutObraInput> | DocumentoCreateWithoutObraInput[] | DocumentoUncheckedCreateWithoutObraInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutObraInput | DocumentoCreateOrConnectWithoutObraInput[]
    createMany?: DocumentoCreateManyObraInputEnvelope
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
  }

  export type EtapaUncheckedCreateNestedManyWithoutObraInput = {
    create?: XOR<EtapaCreateWithoutObraInput, EtapaUncheckedCreateWithoutObraInput> | EtapaCreateWithoutObraInput[] | EtapaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: EtapaCreateOrConnectWithoutObraInput | EtapaCreateOrConnectWithoutObraInput[]
    createMany?: EtapaCreateManyObraInputEnvelope
    connect?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
  }

  export type MelhoriaUncheckedCreateNestedManyWithoutObraInput = {
    create?: XOR<MelhoriaCreateWithoutObraInput, MelhoriaUncheckedCreateWithoutObraInput> | MelhoriaCreateWithoutObraInput[] | MelhoriaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: MelhoriaCreateOrConnectWithoutObraInput | MelhoriaCreateOrConnectWithoutObraInput[]
    createMany?: MelhoriaCreateManyObraInputEnvelope
    connect?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsuarioUpdateOneRequiredWithoutObrasNestedInput = {
    create?: XOR<UsuarioCreateWithoutObrasInput, UsuarioUncheckedCreateWithoutObrasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutObrasInput
    upsert?: UsuarioUpsertWithoutObrasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutObrasInput, UsuarioUpdateWithoutObrasInput>, UsuarioUncheckedUpdateWithoutObrasInput>
  }

  export type DocumentoUpdateManyWithoutObraNestedInput = {
    create?: XOR<DocumentoCreateWithoutObraInput, DocumentoUncheckedCreateWithoutObraInput> | DocumentoCreateWithoutObraInput[] | DocumentoUncheckedCreateWithoutObraInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutObraInput | DocumentoCreateOrConnectWithoutObraInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutObraInput | DocumentoUpsertWithWhereUniqueWithoutObraInput[]
    createMany?: DocumentoCreateManyObraInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutObraInput | DocumentoUpdateWithWhereUniqueWithoutObraInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutObraInput | DocumentoUpdateManyWithWhereWithoutObraInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type EtapaUpdateManyWithoutObraNestedInput = {
    create?: XOR<EtapaCreateWithoutObraInput, EtapaUncheckedCreateWithoutObraInput> | EtapaCreateWithoutObraInput[] | EtapaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: EtapaCreateOrConnectWithoutObraInput | EtapaCreateOrConnectWithoutObraInput[]
    upsert?: EtapaUpsertWithWhereUniqueWithoutObraInput | EtapaUpsertWithWhereUniqueWithoutObraInput[]
    createMany?: EtapaCreateManyObraInputEnvelope
    set?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    disconnect?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    delete?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    connect?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    update?: EtapaUpdateWithWhereUniqueWithoutObraInput | EtapaUpdateWithWhereUniqueWithoutObraInput[]
    updateMany?: EtapaUpdateManyWithWhereWithoutObraInput | EtapaUpdateManyWithWhereWithoutObraInput[]
    deleteMany?: EtapaScalarWhereInput | EtapaScalarWhereInput[]
  }

  export type MelhoriaUpdateManyWithoutObraNestedInput = {
    create?: XOR<MelhoriaCreateWithoutObraInput, MelhoriaUncheckedCreateWithoutObraInput> | MelhoriaCreateWithoutObraInput[] | MelhoriaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: MelhoriaCreateOrConnectWithoutObraInput | MelhoriaCreateOrConnectWithoutObraInput[]
    upsert?: MelhoriaUpsertWithWhereUniqueWithoutObraInput | MelhoriaUpsertWithWhereUniqueWithoutObraInput[]
    createMany?: MelhoriaCreateManyObraInputEnvelope
    set?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    disconnect?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    delete?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    connect?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    update?: MelhoriaUpdateWithWhereUniqueWithoutObraInput | MelhoriaUpdateWithWhereUniqueWithoutObraInput[]
    updateMany?: MelhoriaUpdateManyWithWhereWithoutObraInput | MelhoriaUpdateManyWithWhereWithoutObraInput[]
    deleteMany?: MelhoriaScalarWhereInput | MelhoriaScalarWhereInput[]
  }

  export type DocumentoUncheckedUpdateManyWithoutObraNestedInput = {
    create?: XOR<DocumentoCreateWithoutObraInput, DocumentoUncheckedCreateWithoutObraInput> | DocumentoCreateWithoutObraInput[] | DocumentoUncheckedCreateWithoutObraInput[]
    connectOrCreate?: DocumentoCreateOrConnectWithoutObraInput | DocumentoCreateOrConnectWithoutObraInput[]
    upsert?: DocumentoUpsertWithWhereUniqueWithoutObraInput | DocumentoUpsertWithWhereUniqueWithoutObraInput[]
    createMany?: DocumentoCreateManyObraInputEnvelope
    set?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    disconnect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    delete?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    connect?: DocumentoWhereUniqueInput | DocumentoWhereUniqueInput[]
    update?: DocumentoUpdateWithWhereUniqueWithoutObraInput | DocumentoUpdateWithWhereUniqueWithoutObraInput[]
    updateMany?: DocumentoUpdateManyWithWhereWithoutObraInput | DocumentoUpdateManyWithWhereWithoutObraInput[]
    deleteMany?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
  }

  export type EtapaUncheckedUpdateManyWithoutObraNestedInput = {
    create?: XOR<EtapaCreateWithoutObraInput, EtapaUncheckedCreateWithoutObraInput> | EtapaCreateWithoutObraInput[] | EtapaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: EtapaCreateOrConnectWithoutObraInput | EtapaCreateOrConnectWithoutObraInput[]
    upsert?: EtapaUpsertWithWhereUniqueWithoutObraInput | EtapaUpsertWithWhereUniqueWithoutObraInput[]
    createMany?: EtapaCreateManyObraInputEnvelope
    set?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    disconnect?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    delete?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    connect?: EtapaWhereUniqueInput | EtapaWhereUniqueInput[]
    update?: EtapaUpdateWithWhereUniqueWithoutObraInput | EtapaUpdateWithWhereUniqueWithoutObraInput[]
    updateMany?: EtapaUpdateManyWithWhereWithoutObraInput | EtapaUpdateManyWithWhereWithoutObraInput[]
    deleteMany?: EtapaScalarWhereInput | EtapaScalarWhereInput[]
  }

  export type MelhoriaUncheckedUpdateManyWithoutObraNestedInput = {
    create?: XOR<MelhoriaCreateWithoutObraInput, MelhoriaUncheckedCreateWithoutObraInput> | MelhoriaCreateWithoutObraInput[] | MelhoriaUncheckedCreateWithoutObraInput[]
    connectOrCreate?: MelhoriaCreateOrConnectWithoutObraInput | MelhoriaCreateOrConnectWithoutObraInput[]
    upsert?: MelhoriaUpsertWithWhereUniqueWithoutObraInput | MelhoriaUpsertWithWhereUniqueWithoutObraInput[]
    createMany?: MelhoriaCreateManyObraInputEnvelope
    set?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    disconnect?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    delete?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    connect?: MelhoriaWhereUniqueInput | MelhoriaWhereUniqueInput[]
    update?: MelhoriaUpdateWithWhereUniqueWithoutObraInput | MelhoriaUpdateWithWhereUniqueWithoutObraInput[]
    updateMany?: MelhoriaUpdateManyWithWhereWithoutObraInput | MelhoriaUpdateManyWithWhereWithoutObraInput[]
    deleteMany?: MelhoriaScalarWhereInput | MelhoriaScalarWhereInput[]
  }

  export type ObraCreateNestedOneWithoutDocumentosInput = {
    create?: XOR<ObraCreateWithoutDocumentosInput, ObraUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: ObraCreateOrConnectWithoutDocumentosInput
    connect?: ObraWhereUniqueInput
  }

  export type ObraUpdateOneRequiredWithoutDocumentosNestedInput = {
    create?: XOR<ObraCreateWithoutDocumentosInput, ObraUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: ObraCreateOrConnectWithoutDocumentosInput
    upsert?: ObraUpsertWithoutDocumentosInput
    connect?: ObraWhereUniqueInput
    update?: XOR<XOR<ObraUpdateToOneWithWhereWithoutDocumentosInput, ObraUpdateWithoutDocumentosInput>, ObraUncheckedUpdateWithoutDocumentosInput>
  }

  export type ObraCreateNestedOneWithoutEtapasInput = {
    create?: XOR<ObraCreateWithoutEtapasInput, ObraUncheckedCreateWithoutEtapasInput>
    connectOrCreate?: ObraCreateOrConnectWithoutEtapasInput
    connect?: ObraWhereUniqueInput
  }

  export type ObraUpdateOneRequiredWithoutEtapasNestedInput = {
    create?: XOR<ObraCreateWithoutEtapasInput, ObraUncheckedCreateWithoutEtapasInput>
    connectOrCreate?: ObraCreateOrConnectWithoutEtapasInput
    upsert?: ObraUpsertWithoutEtapasInput
    connect?: ObraWhereUniqueInput
    update?: XOR<XOR<ObraUpdateToOneWithWhereWithoutEtapasInput, ObraUpdateWithoutEtapasInput>, ObraUncheckedUpdateWithoutEtapasInput>
  }

  export type ObraCreateNestedOneWithoutMelhoriasInput = {
    create?: XOR<ObraCreateWithoutMelhoriasInput, ObraUncheckedCreateWithoutMelhoriasInput>
    connectOrCreate?: ObraCreateOrConnectWithoutMelhoriasInput
    connect?: ObraWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ObraUpdateOneWithoutMelhoriasNestedInput = {
    create?: XOR<ObraCreateWithoutMelhoriasInput, ObraUncheckedCreateWithoutMelhoriasInput>
    connectOrCreate?: ObraCreateOrConnectWithoutMelhoriasInput
    upsert?: ObraUpsertWithoutMelhoriasInput
    disconnect?: ObraWhereInput | boolean
    delete?: ObraWhereInput | boolean
    connect?: ObraWhereUniqueInput
    update?: XOR<XOR<ObraUpdateToOneWithWhereWithoutMelhoriasInput, ObraUpdateWithoutMelhoriasInput>, ObraUncheckedUpdateWithoutMelhoriasInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ObraCreateWithoutServidorInput = {
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    documentos?: DocumentoCreateNestedManyWithoutObraInput
    etapas?: EtapaCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaCreateNestedManyWithoutObraInput
  }

  export type ObraUncheckedCreateWithoutServidorInput = {
    id?: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    documentos?: DocumentoUncheckedCreateNestedManyWithoutObraInput
    etapas?: EtapaUncheckedCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaUncheckedCreateNestedManyWithoutObraInput
  }

  export type ObraCreateOrConnectWithoutServidorInput = {
    where: ObraWhereUniqueInput
    create: XOR<ObraCreateWithoutServidorInput, ObraUncheckedCreateWithoutServidorInput>
  }

  export type ObraCreateManyServidorInputEnvelope = {
    data: ObraCreateManyServidorInput | ObraCreateManyServidorInput[]
    skipDuplicates?: boolean
  }

  export type ObraUpsertWithWhereUniqueWithoutServidorInput = {
    where: ObraWhereUniqueInput
    update: XOR<ObraUpdateWithoutServidorInput, ObraUncheckedUpdateWithoutServidorInput>
    create: XOR<ObraCreateWithoutServidorInput, ObraUncheckedCreateWithoutServidorInput>
  }

  export type ObraUpdateWithWhereUniqueWithoutServidorInput = {
    where: ObraWhereUniqueInput
    data: XOR<ObraUpdateWithoutServidorInput, ObraUncheckedUpdateWithoutServidorInput>
  }

  export type ObraUpdateManyWithWhereWithoutServidorInput = {
    where: ObraScalarWhereInput
    data: XOR<ObraUpdateManyMutationInput, ObraUncheckedUpdateManyWithoutServidorInput>
  }

  export type ObraScalarWhereInput = {
    AND?: ObraScalarWhereInput | ObraScalarWhereInput[]
    OR?: ObraScalarWhereInput[]
    NOT?: ObraScalarWhereInput | ObraScalarWhereInput[]
    id?: IntFilter<"Obra"> | number
    nome?: StringFilter<"Obra"> | string
    localizacao?: StringFilter<"Obra"> | string
    empresa?: StringFilter<"Obra"> | string
    cronograma?: StringFilter<"Obra"> | string
    orcamento?: FloatFilter<"Obra"> | number
    status?: StringFilter<"Obra"> | string
    criadoEm?: DateTimeFilter<"Obra"> | Date | string
    servidorId?: IntFilter<"Obra"> | number
  }

  export type UsuarioCreateWithoutObrasInput = {
    nome: string
    email: string
    senha: string
    criadoEm?: Date | string
  }

  export type UsuarioUncheckedCreateWithoutObrasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    criadoEm?: Date | string
  }

  export type UsuarioCreateOrConnectWithoutObrasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutObrasInput, UsuarioUncheckedCreateWithoutObrasInput>
  }

  export type DocumentoCreateWithoutObraInput = {
    nome: string
    url: string
  }

  export type DocumentoUncheckedCreateWithoutObraInput = {
    id?: number
    nome: string
    url: string
  }

  export type DocumentoCreateOrConnectWithoutObraInput = {
    where: DocumentoWhereUniqueInput
    create: XOR<DocumentoCreateWithoutObraInput, DocumentoUncheckedCreateWithoutObraInput>
  }

  export type DocumentoCreateManyObraInputEnvelope = {
    data: DocumentoCreateManyObraInput | DocumentoCreateManyObraInput[]
    skipDuplicates?: boolean
  }

  export type EtapaCreateWithoutObraInput = {
    nome: string
    status: string
  }

  export type EtapaUncheckedCreateWithoutObraInput = {
    id?: number
    nome: string
    status: string
  }

  export type EtapaCreateOrConnectWithoutObraInput = {
    where: EtapaWhereUniqueInput
    create: XOR<EtapaCreateWithoutObraInput, EtapaUncheckedCreateWithoutObraInput>
  }

  export type EtapaCreateManyObraInputEnvelope = {
    data: EtapaCreateManyObraInput | EtapaCreateManyObraInput[]
    skipDuplicates?: boolean
  }

  export type MelhoriaCreateWithoutObraInput = {
    nome?: string | null
    email?: string | null
    mensagem: string
    tipo: string
    criadoEm?: Date | string
  }

  export type MelhoriaUncheckedCreateWithoutObraInput = {
    id?: number
    nome?: string | null
    email?: string | null
    mensagem: string
    tipo: string
    criadoEm?: Date | string
  }

  export type MelhoriaCreateOrConnectWithoutObraInput = {
    where: MelhoriaWhereUniqueInput
    create: XOR<MelhoriaCreateWithoutObraInput, MelhoriaUncheckedCreateWithoutObraInput>
  }

  export type MelhoriaCreateManyObraInputEnvelope = {
    data: MelhoriaCreateManyObraInput | MelhoriaCreateManyObraInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutObrasInput = {
    update: XOR<UsuarioUpdateWithoutObrasInput, UsuarioUncheckedUpdateWithoutObrasInput>
    create: XOR<UsuarioCreateWithoutObrasInput, UsuarioUncheckedCreateWithoutObrasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutObrasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutObrasInput, UsuarioUncheckedUpdateWithoutObrasInput>
  }

  export type UsuarioUpdateWithoutObrasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateWithoutObrasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoUpsertWithWhereUniqueWithoutObraInput = {
    where: DocumentoWhereUniqueInput
    update: XOR<DocumentoUpdateWithoutObraInput, DocumentoUncheckedUpdateWithoutObraInput>
    create: XOR<DocumentoCreateWithoutObraInput, DocumentoUncheckedCreateWithoutObraInput>
  }

  export type DocumentoUpdateWithWhereUniqueWithoutObraInput = {
    where: DocumentoWhereUniqueInput
    data: XOR<DocumentoUpdateWithoutObraInput, DocumentoUncheckedUpdateWithoutObraInput>
  }

  export type DocumentoUpdateManyWithWhereWithoutObraInput = {
    where: DocumentoScalarWhereInput
    data: XOR<DocumentoUpdateManyMutationInput, DocumentoUncheckedUpdateManyWithoutObraInput>
  }

  export type DocumentoScalarWhereInput = {
    AND?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
    OR?: DocumentoScalarWhereInput[]
    NOT?: DocumentoScalarWhereInput | DocumentoScalarWhereInput[]
    id?: IntFilter<"Documento"> | number
    nome?: StringFilter<"Documento"> | string
    url?: StringFilter<"Documento"> | string
    obraId?: IntFilter<"Documento"> | number
  }

  export type EtapaUpsertWithWhereUniqueWithoutObraInput = {
    where: EtapaWhereUniqueInput
    update: XOR<EtapaUpdateWithoutObraInput, EtapaUncheckedUpdateWithoutObraInput>
    create: XOR<EtapaCreateWithoutObraInput, EtapaUncheckedCreateWithoutObraInput>
  }

  export type EtapaUpdateWithWhereUniqueWithoutObraInput = {
    where: EtapaWhereUniqueInput
    data: XOR<EtapaUpdateWithoutObraInput, EtapaUncheckedUpdateWithoutObraInput>
  }

  export type EtapaUpdateManyWithWhereWithoutObraInput = {
    where: EtapaScalarWhereInput
    data: XOR<EtapaUpdateManyMutationInput, EtapaUncheckedUpdateManyWithoutObraInput>
  }

  export type EtapaScalarWhereInput = {
    AND?: EtapaScalarWhereInput | EtapaScalarWhereInput[]
    OR?: EtapaScalarWhereInput[]
    NOT?: EtapaScalarWhereInput | EtapaScalarWhereInput[]
    id?: IntFilter<"Etapa"> | number
    nome?: StringFilter<"Etapa"> | string
    status?: StringFilter<"Etapa"> | string
    obraId?: IntFilter<"Etapa"> | number
  }

  export type MelhoriaUpsertWithWhereUniqueWithoutObraInput = {
    where: MelhoriaWhereUniqueInput
    update: XOR<MelhoriaUpdateWithoutObraInput, MelhoriaUncheckedUpdateWithoutObraInput>
    create: XOR<MelhoriaCreateWithoutObraInput, MelhoriaUncheckedCreateWithoutObraInput>
  }

  export type MelhoriaUpdateWithWhereUniqueWithoutObraInput = {
    where: MelhoriaWhereUniqueInput
    data: XOR<MelhoriaUpdateWithoutObraInput, MelhoriaUncheckedUpdateWithoutObraInput>
  }

  export type MelhoriaUpdateManyWithWhereWithoutObraInput = {
    where: MelhoriaScalarWhereInput
    data: XOR<MelhoriaUpdateManyMutationInput, MelhoriaUncheckedUpdateManyWithoutObraInput>
  }

  export type MelhoriaScalarWhereInput = {
    AND?: MelhoriaScalarWhereInput | MelhoriaScalarWhereInput[]
    OR?: MelhoriaScalarWhereInput[]
    NOT?: MelhoriaScalarWhereInput | MelhoriaScalarWhereInput[]
    id?: IntFilter<"Melhoria"> | number
    nome?: StringNullableFilter<"Melhoria"> | string | null
    email?: StringNullableFilter<"Melhoria"> | string | null
    mensagem?: StringFilter<"Melhoria"> | string
    tipo?: StringFilter<"Melhoria"> | string
    obraId?: IntNullableFilter<"Melhoria"> | number | null
    criadoEm?: DateTimeFilter<"Melhoria"> | Date | string
  }

  export type ObraCreateWithoutDocumentosInput = {
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidor: UsuarioCreateNestedOneWithoutObrasInput
    etapas?: EtapaCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaCreateNestedManyWithoutObraInput
  }

  export type ObraUncheckedCreateWithoutDocumentosInput = {
    id?: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidorId: number
    etapas?: EtapaUncheckedCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaUncheckedCreateNestedManyWithoutObraInput
  }

  export type ObraCreateOrConnectWithoutDocumentosInput = {
    where: ObraWhereUniqueInput
    create: XOR<ObraCreateWithoutDocumentosInput, ObraUncheckedCreateWithoutDocumentosInput>
  }

  export type ObraUpsertWithoutDocumentosInput = {
    update: XOR<ObraUpdateWithoutDocumentosInput, ObraUncheckedUpdateWithoutDocumentosInput>
    create: XOR<ObraCreateWithoutDocumentosInput, ObraUncheckedCreateWithoutDocumentosInput>
    where?: ObraWhereInput
  }

  export type ObraUpdateToOneWithWhereWithoutDocumentosInput = {
    where?: ObraWhereInput
    data: XOR<ObraUpdateWithoutDocumentosInput, ObraUncheckedUpdateWithoutDocumentosInput>
  }

  export type ObraUpdateWithoutDocumentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidor?: UsuarioUpdateOneRequiredWithoutObrasNestedInput
    etapas?: EtapaUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUpdateManyWithoutObraNestedInput
  }

  export type ObraUncheckedUpdateWithoutDocumentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidorId?: IntFieldUpdateOperationsInput | number
    etapas?: EtapaUncheckedUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUncheckedUpdateManyWithoutObraNestedInput
  }

  export type ObraCreateWithoutEtapasInput = {
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidor: UsuarioCreateNestedOneWithoutObrasInput
    documentos?: DocumentoCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaCreateNestedManyWithoutObraInput
  }

  export type ObraUncheckedCreateWithoutEtapasInput = {
    id?: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidorId: number
    documentos?: DocumentoUncheckedCreateNestedManyWithoutObraInput
    melhorias?: MelhoriaUncheckedCreateNestedManyWithoutObraInput
  }

  export type ObraCreateOrConnectWithoutEtapasInput = {
    where: ObraWhereUniqueInput
    create: XOR<ObraCreateWithoutEtapasInput, ObraUncheckedCreateWithoutEtapasInput>
  }

  export type ObraUpsertWithoutEtapasInput = {
    update: XOR<ObraUpdateWithoutEtapasInput, ObraUncheckedUpdateWithoutEtapasInput>
    create: XOR<ObraCreateWithoutEtapasInput, ObraUncheckedCreateWithoutEtapasInput>
    where?: ObraWhereInput
  }

  export type ObraUpdateToOneWithWhereWithoutEtapasInput = {
    where?: ObraWhereInput
    data: XOR<ObraUpdateWithoutEtapasInput, ObraUncheckedUpdateWithoutEtapasInput>
  }

  export type ObraUpdateWithoutEtapasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidor?: UsuarioUpdateOneRequiredWithoutObrasNestedInput
    documentos?: DocumentoUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUpdateManyWithoutObraNestedInput
  }

  export type ObraUncheckedUpdateWithoutEtapasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidorId?: IntFieldUpdateOperationsInput | number
    documentos?: DocumentoUncheckedUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUncheckedUpdateManyWithoutObraNestedInput
  }

  export type ObraCreateWithoutMelhoriasInput = {
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidor: UsuarioCreateNestedOneWithoutObrasInput
    documentos?: DocumentoCreateNestedManyWithoutObraInput
    etapas?: EtapaCreateNestedManyWithoutObraInput
  }

  export type ObraUncheckedCreateWithoutMelhoriasInput = {
    id?: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
    servidorId: number
    documentos?: DocumentoUncheckedCreateNestedManyWithoutObraInput
    etapas?: EtapaUncheckedCreateNestedManyWithoutObraInput
  }

  export type ObraCreateOrConnectWithoutMelhoriasInput = {
    where: ObraWhereUniqueInput
    create: XOR<ObraCreateWithoutMelhoriasInput, ObraUncheckedCreateWithoutMelhoriasInput>
  }

  export type ObraUpsertWithoutMelhoriasInput = {
    update: XOR<ObraUpdateWithoutMelhoriasInput, ObraUncheckedUpdateWithoutMelhoriasInput>
    create: XOR<ObraCreateWithoutMelhoriasInput, ObraUncheckedCreateWithoutMelhoriasInput>
    where?: ObraWhereInput
  }

  export type ObraUpdateToOneWithWhereWithoutMelhoriasInput = {
    where?: ObraWhereInput
    data: XOR<ObraUpdateWithoutMelhoriasInput, ObraUncheckedUpdateWithoutMelhoriasInput>
  }

  export type ObraUpdateWithoutMelhoriasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidor?: UsuarioUpdateOneRequiredWithoutObrasNestedInput
    documentos?: DocumentoUpdateManyWithoutObraNestedInput
    etapas?: EtapaUpdateManyWithoutObraNestedInput
  }

  export type ObraUncheckedUpdateWithoutMelhoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    servidorId?: IntFieldUpdateOperationsInput | number
    documentos?: DocumentoUncheckedUpdateManyWithoutObraNestedInput
    etapas?: EtapaUncheckedUpdateManyWithoutObraNestedInput
  }

  export type ObraCreateManyServidorInput = {
    id?: number
    nome: string
    localizacao: string
    empresa: string
    cronograma: string
    orcamento: number
    status: string
    criadoEm?: Date | string
  }

  export type ObraUpdateWithoutServidorInput = {
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    documentos?: DocumentoUpdateManyWithoutObraNestedInput
    etapas?: EtapaUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUpdateManyWithoutObraNestedInput
  }

  export type ObraUncheckedUpdateWithoutServidorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    documentos?: DocumentoUncheckedUpdateManyWithoutObraNestedInput
    etapas?: EtapaUncheckedUpdateManyWithoutObraNestedInput
    melhorias?: MelhoriaUncheckedUpdateManyWithoutObraNestedInput
  }

  export type ObraUncheckedUpdateManyWithoutServidorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    localizacao?: StringFieldUpdateOperationsInput | string
    empresa?: StringFieldUpdateOperationsInput | string
    cronograma?: StringFieldUpdateOperationsInput | string
    orcamento?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentoCreateManyObraInput = {
    id?: number
    nome: string
    url: string
  }

  export type EtapaCreateManyObraInput = {
    id?: number
    nome: string
    status: string
  }

  export type MelhoriaCreateManyObraInput = {
    id?: number
    nome?: string | null
    email?: string | null
    mensagem: string
    tipo: string
    criadoEm?: Date | string
  }

  export type DocumentoUpdateWithoutObraInput = {
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentoUncheckedUpdateWithoutObraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type DocumentoUncheckedUpdateManyWithoutObraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
  }

  export type EtapaUpdateWithoutObraInput = {
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EtapaUncheckedUpdateWithoutObraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type EtapaUncheckedUpdateManyWithoutObraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type MelhoriaUpdateWithoutObraInput = {
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mensagem?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MelhoriaUncheckedUpdateWithoutObraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mensagem?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MelhoriaUncheckedUpdateManyWithoutObraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    mensagem?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}